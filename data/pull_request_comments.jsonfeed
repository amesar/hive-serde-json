{ "_id" : { "$oid" : "52e96184bd3543fed6004c2f"} , "url" : "https://api.github.com/repos/mozilla-b2g/gaia/pulls/comments/9282459" , "id" : 9282459 , "diff_hunk" : "@@ -0,0 +1,153 @@\n+var Clock = require('./clock');\n+var clockAssert = require('./assert');\n+\n+function Alarm() {\n+  Clock.apply(this, arguments);\n+}\n+\n+module.exports = Alarm;\n+\n+Alarm.prototype = Object.create(Clock.prototype);\n+\n+// Amount of time to wait for Alarm creation banner to be hidden\n+Alarm.bannerTimeout = 5 * 1000;\n+\n+[\n+  'analogClock', 'digitalClock', 'countdownBanner'\n+].forEach(function(name) {\n+  Object.defineProperty(Alarm.prototype, name + 'Displayed', {\n+    get: function() {\n+      return this.el.alarm[name].displayed();\n+    }\n+  });\n+});\n+\n+// Ensure that the 'Countdown banner' element is eventually hidden.\n+Alarm.prototype.waitForBannerHidden = function() {\n+   this.client.waitFor(function() {" , "path" : "apps/clock/test/marionette/lib/alarm.js" , "position" : 27 , "original_position" : 27 , "commit_id" : "23fb79258862ab303dfafad0bbaf7f962e28c677" , "original_commit_id" : "23fb79258862ab303dfafad0bbaf7f962e28c677" , "user" : { "login" : "gaye" , "id" : 535859 , "avatar_url" : "https://gravatar.com/avatar/e781ab5c4935bc74643c593608505556?d=https%3A%2F%2Fidenticons.github.com%2F1033eb54923520c4658b4e82513043b5.png&r=x" , "gravatar_id" : "e781ab5c4935bc74643c593608505556" , "url" : "https://api.github.com/users/gaye" , "html_url" : "https://github.com/gaye" , "followers_url" : "https://api.github.com/users/gaye/followers" , "following_url" : "https://api.github.com/users/gaye/following{/other_user}" , "gists_url" : "https://api.github.com/users/gaye/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/gaye/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/gaye/subscriptions" , "organizations_url" : "https://api.github.com/users/gaye/orgs" , "repos_url" : "https://api.github.com/users/gaye/repos" , "events_url" : "https://api.github.com/users/gaye/events{/privacy}" , "received_events_url" : "https://api.github.com/users/gaye/received_events" , "type" : "User" , "site_admin" : false} , "body" : "One idea is that you could modify the banner implementation to leave a timestamp or something similar in the DOM to indicate that the banner was shown and hidden at a certain time. This is not the best, but I can't think of any other non-racy way to achieve this." , "created_at" : "2014-01-29T20:16:02Z" , "updated_at" : "2014-01-29T20:16:02Z" , "html_url" : "https://github.com/mozilla-b2g/gaia/pull/15613#discussion_r9282459" , "pull_request_url" : "https://api.github.com/repos/mozilla-b2g/gaia/pulls/15613" , "_links" : { "self" : { "href" : "https://api.github.com/repos/mozilla-b2g/gaia/pulls/comments/9282459"} , "html" : { "href" : "https://github.com/mozilla-b2g/gaia/pull/15613#discussion_r9282459"} , "pull_request" : { "href" : "https://api.github.com/repos/mozilla-b2g/gaia/pulls/15613"}} , "repo" : "gaia" , "owner" : "mozilla-b2g" , "pullreq_id" : 15613}
{ "_id" : { "$oid" : "52e9618abd3543fea30039da"} , "url" : "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/9282464" , "id" : 9282464 , "diff_hunk" : "@@ -117,7 +117,7 @@ def sync\n             end\n           end\n         rescue Timeout::Error\n-          self.fail \"Command exceeded timeout\" % value.inspect\n+          self.fail Puppet::Error, \"Command exceeded timeout\" % value.inspect, $!.backtrace" , "path" : "lib/puppet/type/exec.rb" , "position" : 5 , "original_position" : 5 , "commit_id" : "9fa4a39a684cba8ccb0902060a2557357c05f39e" , "original_commit_id" : "9fa4a39a684cba8ccb0902060a2557357c05f39e" , "user" : { "login" : "peterhuene" , "id" : 509666 , "avatar_url" : "https://gravatar.com/avatar/31a910d347dac0a0b6a433e192cf3aab?d=https%3A%2F%2Fidenticons.github.com%2F3a98cc2a9ab230d09033ef5d7302029d.png&r=x" , "gravatar_id" : "31a910d347dac0a0b6a433e192cf3aab" , "url" : "https://api.github.com/users/peterhuene" , "html_url" : "https://github.com/peterhuene" , "followers_url" : "https://api.github.com/users/peterhuene/followers" , "following_url" : "https://api.github.com/users/peterhuene/following{/other_user}" , "gists_url" : "https://api.github.com/users/peterhuene/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/peterhuene/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/peterhuene/subscriptions" , "organizations_url" : "https://api.github.com/users/peterhuene/orgs" , "repos_url" : "https://api.github.com/users/peterhuene/repos" , "events_url" : "https://api.github.com/users/peterhuene/events{/privacy}" , "received_events_url" : "https://api.github.com/users/peterhuene/received_events" , "type" : "User" , "site_admin" : false} , "body" : "Passing backtrace.  Will fix." , "created_at" : "2014-01-29T20:16:09Z" , "updated_at" : "2014-01-29T20:16:09Z" , "html_url" : "https://github.com/puppetlabs/puppet/pull/2293#discussion_r9282464" , "pull_request_url" : "https://api.github.com/repos/puppetlabs/puppet/pulls/2293" , "_links" : { "self" : { "href" : "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/9282464"} , "html" : { "href" : "https://github.com/puppetlabs/puppet/pull/2293#discussion_r9282464"} , "pull_request" : { "href" : "https://api.github.com/repos/puppetlabs/puppet/pulls/2293"}} , "repo" : "puppet" , "owner" : "puppetlabs" , "pullreq_id" : 2293}
{ "_id" : { "$oid" : "52e96195bd35430297004d17"} , "url" : "https://api.github.com/repos/theforeman/theforeman.org/pulls/comments/9282467" , "id" : 9282467 , "diff_hunk" : "@@ -120,16 +201,36 @@ Default: 30\n The default puppet server hostname. For larger organizations this is often a non fqdn so that a name like _puppet_ can be a different host within each DNS domain.\n Default: puppet\n \n-##### puppetconfdir\n-Path to directory containing puppet.conf.\n-Default: /etc/puppet\n-\n-\n ##### puppetrun\n \n If this option is set to _true_ then Foreman will be able to trigger a puppet run on any host that it manages.\n Default: false\n \n+##### query_local_nameservers\n+\n+If _true_, Foreman will query the local DNS or SOA/NS authority.\n+Default: false\n+\n+##### remote_addr\n+\n+If Foreman is running behind Passenger or a remote load balancer, the IP of this load balance should be set here. This is a regular expression, so it can support several load balancers, i.e: (10.0.0.1|127.0.0.1)\n+Default: 127.0.0.1\n+\n+##### remove_classes_not_in_environment\n+\n+A host and a host group might be in different environments (i.e: host in environment 'develop', host group in environment 'production'). If you want your host to only pick up classes from its environment, and not pick up classes from any other environment, set this to _true_\n+Default: false\n+\n+##### require_ssl_puppetmasters\n+\n+SSL certificates will be used to contact smart proxies and check ENC output over HTTPS, require_ssl in config/settings.yaml should be enabled too." , "path" : "_includes/manuals/1.4/3.5.2_configuration_options.md" , "position" : 159 , "original_position" : 159 , "commit_id" : "42a68f6cef220f4994f39e56460d760abc394ee1" , "original_commit_id" : "42a68f6cef220f4994f39e56460d760abc394ee1" , "user" : { "login" : "domcleal" , "id" : 482089 , "avatar_url" : "https://gravatar.com/avatar/b610ed8556fcee2b7ab876c642a4ce42?d=https%3A%2F%2Fidenticons.github.com%2Fa3815ce6fe14ce9594a64da81bbd7d15.png&r=x" , "gravatar_id" : "b610ed8556fcee2b7ab876c642a4ce42" , "url" : "https://api.github.com/users/domcleal" , "html_url" : "https://github.com/domcleal" , "followers_url" : "https://api.github.com/users/domcleal/followers" , "following_url" : "https://api.github.com/users/domcleal/following{/other_user}" , "gists_url" : "https://api.github.com/users/domcleal/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/domcleal/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/domcleal/subscriptions" , "organizations_url" : "https://api.github.com/users/domcleal/orgs" , "repos_url" : "https://api.github.com/users/domcleal/repos" , "events_url" : "https://api.github.com/users/domcleal/events{/privacy}" , "received_events_url" : "https://api.github.com/users/domcleal/received_events" , "type" : "User" , "site_admin" : false} , "body" : "Check section 5.4.1 for a more accurate description." , "created_at" : "2014-01-29T20:16:18Z" , "updated_at" : "2014-01-29T20:16:18Z" , "html_url" : "https://github.com/theforeman/theforeman.org/pull/157#discussion_r9282467" , "pull_request_url" : "https://api.github.com/repos/theforeman/theforeman.org/pulls/157" , "_links" : { "self" : { "href" : "https://api.github.com/repos/theforeman/theforeman.org/pulls/comments/9282467"} , "html" : { "href" : "https://github.com/theforeman/theforeman.org/pull/157#discussion_r9282467"} , "pull_request" : { "href" : "https://api.github.com/repos/theforeman/theforeman.org/pulls/157"}} , "repo" : "theforeman.org" , "owner" : "theforeman" , "pullreq_id" : 157}
{ "_id" : { "$oid" : "52e96196bd3543fef5004bde"} , "url" : "https://api.github.com/repos/JuliaLang/julia/pulls/comments/9282466" , "id" : 9282466 , "diff_hunk" : "@@ -383,7 +383,7 @@ C = randn(2,2)\n \n for elty in (Float32, Float64, Complex64, Complex128, Int)\n     if elty == Int\n-        srand(61516384)\n+        srand(61516300)" , "path" : "test/linalg.jl" , "position" : 5 , "original_position" : 5 , "commit_id" : "361708d84cc4457869c218effb753c6198a08093" , "original_commit_id" : "bb95040eef26ddd998738456b47f7f5ad70d4868" , "user" : { "login" : "jiahao" , "id" : 1732 , "avatar_url" : "https://gravatar.com/avatar/6cba33e8e7c69fa63f6ad386b7a958c5?d=https%3A%2F%2Fidenticons.github.com%2F270edd69788dce200a3b395a6da6fdb7.png&r=x" , "gravatar_id" : "6cba33e8e7c69fa63f6ad386b7a958c5" , "url" : "https://api.github.com/users/jiahao" , "html_url" : "https://github.com/jiahao" , "followers_url" : "https://api.github.com/users/jiahao/followers" , "following_url" : "https://api.github.com/users/jiahao/following{/other_user}" , "gists_url" : "https://api.github.com/users/jiahao/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/jiahao/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/jiahao/subscriptions" , "organizations_url" : "https://api.github.com/users/jiahao/orgs" , "repos_url" : "https://api.github.com/users/jiahao/repos" , "events_url" : "https://api.github.com/users/jiahao/events{/privacy}" , "received_events_url" : "https://api.github.com/users/jiahao/received_events" , "type" : "User" , "site_admin" : false} , "body" : "@lindahua I went on a little rant in #5472 about this issue, namely that most of the tests implement incorrect error bounds and are adjusted heuristically, resulting in the current brittleness. I've started putting in the proper error bounds on things, but it's a slow and manual process.\r\n\r\n#4638 even discusses the possibility of moving the Woodbury code out of Base, but that's primarily a matter of convenience rather than addressing the root problem.\r\n\r\n@andreasnoackjensen" , "created_at" : "2014-01-29T20:16:17Z" , "updated_at" : "2014-01-29T20:16:17Z" , "html_url" : "https://github.com/JuliaLang/julia/pull/5578#discussion_r9282466" , "pull_request_url" : "https://api.github.com/repos/JuliaLang/julia/pulls/5578" , "_links" : { "self" : { "href" : "https://api.github.com/repos/JuliaLang/julia/pulls/comments/9282466"} , "html" : { "href" : "https://github.com/JuliaLang/julia/pull/5578#discussion_r9282466"} , "pull_request" : { "href" : "https://api.github.com/repos/JuliaLang/julia/pulls/5578"}} , "repo" : "julia" , "owner" : "JuliaLang" , "pullreq_id" : 5578}
{ "_id" : { "$oid" : "52e961acbd3543fef5004beb"} , "url" : "https://api.github.com/repos/cms-sw/cmssw/pulls/comments/9282483" , "id" : 9282483 , "diff_hunk" : "@@ -34,16 +34,13 @@\n \n #include \"Validation/EventGenerator/interface/WeightManager.h\"\n \n-class BasicGenParticleValidation : public edm::EDAnalyzer\n-{\n+class BasicGenParticleValidation : public DQMEDAnalyzer{\n     public:\n \texplicit BasicGenParticleValidation(const edm::ParameterSet&);\n \tvirtual ~BasicGenParticleValidation();\n-\tvirtual void beginJob();\n-\tvirtual void endJob();  \n+\n \tvirtual void analyze(const edm::Event&, const edm::EventSetup&);" , "path" : "Validation/EventGenerator/interface/BasicGenParticleValidation.h" , "position" : 29 , "original_position" : 29 , "commit_id" : "0996571e9ee10786f609961686ac0f6d0d6ffab5" , "original_commit_id" : "0996571e9ee10786f609961686ac0f6d0d6ffab5" , "user" : { "login" : "inugent" , "id" : 4751004 , "avatar_url" : "https://gravatar.com/avatar/debc061980ecacb59ca91449238655a8?d=https%3A%2F%2Fidenticons.github.com%2Fe5b73fa3cf005e1a228f94dac8f26f00.png&r=x" , "gravatar_id" : "debc061980ecacb59ca91449238655a8" , "url" : "https://api.github.com/users/inugent" , "html_url" : "https://github.com/inugent" , "followers_url" : "https://api.github.com/users/inugent/followers" , "following_url" : "https://api.github.com/users/inugent/following{/other_user}" , "gists_url" : "https://api.github.com/users/inugent/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/inugent/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/inugent/subscriptions" , "organizations_url" : "https://api.github.com/users/inugent/orgs" , "repos_url" : "https://api.github.com/users/inugent/repos" , "events_url" : "https://api.github.com/users/inugent/events{/privacy}" , "received_events_url" : "https://api.github.com/users/inugent/received_events" , "type" : "User" , "site_admin" : false} , "body" : "Hello,\n    Sorry to be pedantic, but you mean to add the override as seen below?\n\n>  virtual void analyze(const edm::Event&, const edm::EventSetup&) override;\n\nShould this be added to every class that has been modified? Thank you \nand best regards,\nIan\n\nOn 1/29/2014 6:06 PM, Chris Jones wrote:\n>\n> In Validation/EventGenerator/interface/BasicGenParticleValidation.h:\n>\n> >      public:\n> >  \texplicit BasicGenParticleValidation(const edm::ParameterSet&);\n> >  \tvirtual ~BasicGenParticleValidation();\n> > -\tvirtual void beginJob();\n> > -\tirtual void endJob();\n> > +\n> >  \tvirtual void analyze(const edm::Event&, const edm::EventSetup&);\n>\n> Would be good to put an |override| here as well.\n>\n> —\n> Reply to this email directly or view it on GitHub \n> <https://github.com/cms-sw/cmssw/pull/2229/files#r9274449>.\n>\n\n\n-- \nDr. Ian M. Nugent\nIII. Physikalisches Institut B\nRWTH Aachen, D-52056 Aachen\nTel: +49 241 80-27295\nEmail: nugent@physik.rwth-aachen.de" , "created_at" : "2014-01-29T20:16:43Z" , "updated_at" : "2014-01-29T20:16:43Z" , "html_url" : "https://github.com/cms-sw/cmssw/pull/2229#discussion_r9282483" , "pull_request_url" : "https://api.github.com/repos/cms-sw/cmssw/pulls/2229" , "_links" : { "self" : { "href" : "https://api.github.com/repos/cms-sw/cmssw/pulls/comments/9282483"} , "html" : { "href" : "https://github.com/cms-sw/cmssw/pull/2229#discussion_r9282483"} , "pull_request" : { "href" : "https://api.github.com/repos/cms-sw/cmssw/pulls/2229"}} , "repo" : "cmssw" , "owner" : "cms-sw" , "pullreq_id" : 2229}
{ "_id" : { "$oid" : "52e961bebd3543fe92004ae8"} , "url" : "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/9282494" , "id" : 9282494 , "diff_hunk" : "@@ -233,7 +233,7 @@ def read_file_from_filebucket\n \n       dipper.getfile(sum)\n     rescue => detail\n-      fail \"Could not retrieve content for #{should} from filebucket: #{detail}\"\n+      fail detail, \"Could not retrieve content for #{should} from filebucket: #{detail}\", detail.backtrace" , "path" : "lib/puppet/type/file/content.rb" , "position" : 14 , "original_position" : 14 , "commit_id" : "9fa4a39a684cba8ccb0902060a2557357c05f39e" , "original_commit_id" : "9fa4a39a684cba8ccb0902060a2557357c05f39e" , "user" : { "login" : "peterhuene" , "id" : 509666 , "avatar_url" : "https://gravatar.com/avatar/31a910d347dac0a0b6a433e192cf3aab?d=https%3A%2F%2Fidenticons.github.com%2F3a98cc2a9ab230d09033ef5d7302029d.png&r=x" , "gravatar_id" : "31a910d347dac0a0b6a433e192cf3aab" , "url" : "https://api.github.com/users/peterhuene" , "html_url" : "https://github.com/peterhuene" , "followers_url" : "https://api.github.com/users/peterhuene/followers" , "following_url" : "https://api.github.com/users/peterhuene/following{/other_user}" , "gists_url" : "https://api.github.com/users/peterhuene/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/peterhuene/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/peterhuene/subscriptions" , "organizations_url" : "https://api.github.com/users/peterhuene/orgs" , "repos_url" : "https://api.github.com/users/peterhuene/repos" , "events_url" : "https://api.github.com/users/peterhuene/events{/privacy}" , "received_events_url" : "https://api.github.com/users/peterhuene/received_events" , "type" : "User" , "site_admin" : false} , "body" : "It should be ours.  Will fix." , "created_at" : "2014-01-29T20:16:59Z" , "updated_at" : "2014-01-29T20:16:59Z" , "html_url" : "https://github.com/puppetlabs/puppet/pull/2293#discussion_r9282494" , "pull_request_url" : "https://api.github.com/repos/puppetlabs/puppet/pulls/2293" , "_links" : { "self" : { "href" : "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/9282494"} , "html" : { "href" : "https://github.com/puppetlabs/puppet/pull/2293#discussion_r9282494"} , "pull_request" : { "href" : "https://api.github.com/repos/puppetlabs/puppet/pulls/2293"}} , "repo" : "puppet" , "owner" : "puppetlabs" , "pullreq_id" : 2293}
{ "_id" : { "$oid" : "52e961c8bd3543fed6004c4b"} , "url" : "https://api.github.com/repos/binwiederhier/syncany/pulls/comments/9282498" , "id" : 9282498 , "diff_hunk" : "@@ -26,6 +26,8 @@\n import java.util.Map;\n import java.util.Random;\n \n+import javax.swing.JOptionPane;" , "path" : "syncany-lib/src/test/java/org/syncany/tests/util/TestConfigUtil.java" , "position" : 4 , "original_position" : 4 , "commit_id" : "9eb3652710417747d98a60ccfc1014f43d9fd1ba" , "original_commit_id" : "9eb3652710417747d98a60ccfc1014f43d9fd1ba" , "user" : { "login" : "vwiencek" , "id" : 1091392 , "avatar_url" : "https://gravatar.com/avatar/09e8181d48365eaedcefc8704a2f62db?d=https%3A%2F%2Fidenticons.github.com%2Fd7baf19cc64f260319bed889cffb961f.png&r=x" , "gravatar_id" : "09e8181d48365eaedcefc8704a2f62db" , "url" : "https://api.github.com/users/vwiencek" , "html_url" : "https://github.com/vwiencek" , "followers_url" : "https://api.github.com/users/vwiencek/followers" , "following_url" : "https://api.github.com/users/vwiencek/following{/other_user}" , "gists_url" : "https://api.github.com/users/vwiencek/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/vwiencek/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/vwiencek/subscriptions" , "organizations_url" : "https://api.github.com/users/vwiencek/orgs" , "repos_url" : "https://api.github.com/users/vwiencek/repos" , "events_url" : "https://api.github.com/users/vwiencek/events{/privacy}" , "received_events_url" : "https://api.github.com/users/vwiencek/received_events" , "type" : "User" , "site_admin" : false} , "body" : "would like to test something .... and import remained :)\n\n\nOn Wed, Jan 29, 2014 at 8:58 PM, Philipp C. Heckel <notifications@github.com\n> wrote:\n\n> In syncany-lib/src/test/java/org/syncany/tests/util/TestConfigUtil.java:\n>\n> > @@ -26,6 +26,8 @@\n> >  import java.util.Map;\n> >  import java.util.Random;\n> >\n> > +import javax.swing.JOptionPane;\n>\n> This is really odd. JOptionPane in testConfigUtil??\n>\n> --\n> Reply to this email directly or view it on GitHub<https://github.com/binwiederhier/syncany/pull/37/files#r9281689>\n> .\n>\n\n\n\n-- \nVincent Wiencek\nvwiencek@gmail.com" , "created_at" : "2014-01-29T20:17:03Z" , "updated_at" : "2014-01-29T20:17:03Z" , "html_url" : "https://github.com/binwiederhier/syncany/pull/37#discussion_r9282498" , "pull_request_url" : "https://api.github.com/repos/binwiederhier/syncany/pulls/37" , "_links" : { "self" : { "href" : "https://api.github.com/repos/binwiederhier/syncany/pulls/comments/9282498"} , "html" : { "href" : "https://github.com/binwiederhier/syncany/pull/37#discussion_r9282498"} , "pull_request" : { "href" : "https://api.github.com/repos/binwiederhier/syncany/pulls/37"}} , "repo" : "syncany" , "owner" : "binwiederhier" , "pullreq_id" : 37}
{ "_id" : { "$oid" : "52e961cbbd3543fe92004af0"} , "url" : "https://api.github.com/repos/juju/juju-gui/pulls/comments/9253936" , "id" : 9253936 , "diff_hunk" : "@@ -1099,6 +1099,30 @@ YUI.add('juju-gui', function(Y) {\n          */\n         callback: function() {\n           this.views.environment.instance.rendered();\n+          this.views.environment.instance.on('envTakeOverStarting', function(ev) {" , "path" : "app/app.js" , "position" :  null  , "original_position" : 4 , "commit_id" : "a7149187c9758ec3e8cc64caefa136401c0d90a6" , "original_commit_id" : "0ac74580017cc73ad98dff02beb7535d7a56ae1f" , "user" : { "login" : "mitechie" , "id" : 75915 , "avatar_url" : "https://gravatar.com/avatar/1641c0f988b844f44de596fcef3adc62?d=https%3A%2F%2Fidenticons.github.com%2F66777cfa12d147e4836069653448250b.png&r=x" , "gravatar_id" : "1641c0f988b844f44de596fcef3adc62" , "url" : "https://api.github.com/users/mitechie" , "html_url" : "https://github.com/mitechie" , "followers_url" : "https://api.github.com/users/mitechie/followers" , "following_url" : "https://api.github.com/users/mitechie/following{/other_user}" , "gists_url" : "https://api.github.com/users/mitechie/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/mitechie/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/mitechie/subscriptions" , "organizations_url" : "https://api.github.com/users/mitechie/orgs" , "repos_url" : "https://api.github.com/users/mitechie/repos" , "events_url" : "https://api.github.com/users/mitechie/events{/privacy}" , "received_events_url" : "https://api.github.com/users/mitechie/received_events" , "type" : "User" , "site_admin" : false} , "body" : "We tie the event from the App to the Environment view object. It's the object that creates and controls inspectors." , "created_at" : "2014-01-29T01:45:21Z" , "updated_at" : "2014-01-29T13:03:02Z" , "html_url" : "https://github.com/juju/juju-gui/pull/91#discussion_r9253936" , "pull_request_url" : "https://api.github.com/repos/juju/juju-gui/pulls/91" , "_links" : { "self" : { "href" : "https://api.github.com/repos/juju/juju-gui/pulls/comments/9253936"} , "html" : { "href" : "https://github.com/juju/juju-gui/pull/91#discussion_r9253936"} , "pull_request" : { "href" : "https://api.github.com/repos/juju/juju-gui/pulls/91"}} , "owner" : "juju" , "repo" : "juju-gui" , "pullreq_id" : 91}
{ "_id" : { "$oid" : "52e961cbbd3543fe92004af1"} , "url" : "https://api.github.com/repos/juju/juju-gui/pulls/comments/9253972" , "id" : 9253972 , "diff_hunk" : "@@ -37,405 +37,432 @@ YUI.add('juju-view-environment', function(Y) {\n    *\n    * @class EnvironmentView\n    */\n-  var EnvironmentView = Y.Base.create('EnvironmentView', Y.View,\n-                                      [views.JujuBaseView],\n-      {\n-        /**\n-         * @method EnvironmentView.initializer\n-         */\n-        initializer: function() {\n-          this.publish('navigateTo', {\n-            broadcast: true,\n-            preventable: false});\n-\n-          this._inspectors = {};\n-        },\n-\n-        /**\n-         * Wrapper around topo.update. Rather than re-rendering a whole\n-         * topology, the view can require data updates when needed.\n-         * Ideally even this should not be needed, as we can observe\n-         * ModelList change events and debounce update calculations\n-         * internally.\n-         *\n-         * @method update\n-         * @chainable\n-         */\n-        update: function() {\n-          this.topo.update();\n-          return this;\n-        },\n-\n-        /**\n-          @method getInspector\n-          @return {Object} inspector.\n-        */\n-        getInspector: function(name) {\n-          return this._inspectors[name];\n-        },\n-\n-        /**\n-          @method setInspector\n-          @param {ViewletManager} inspector instance.\n-          @param {Boolean} remove flag to remove the instance.\n-          @chainable\n-        */\n-        setInspector: function(inspector, remove) {\n-          var name = inspector.getName();\n-          if (this._inspectors[name] !== undefined && !remove) {\n-            // Close the old inspector and remove it.\n-            var existing = this._inspectors[name];\n-            existing.bindingEngine.unbind();\n-            existing.container.remove(true);\n-          }\n-          if (remove) {\n-            delete this._inspectors[name];\n-          } else {\n-            this._inspectors[name] = inspector;\n-          }\n-          return this;\n-        },\n-\n-        /**\n-          Creates a new service inspector instance of the passed in type.\n-\n-          @method createServiceInspector\n-          @param {Y.Model} model service or charm depending on inspector type.\n-          @param {Object} config object of options to overwrite default config.\n-          @return {Object} The created service inspector.\n-        */\n-        createServiceInspector: function(model, config) {\n-          config = config || {};\n-          var type = 'service',\n-              charm = this.get('db').charms.getById(model.get('charm'));\n-\n-          // This method is called with a charm or service depending on if it's\n-          // called from the charm browser or from the environment. If it is\n-          // called from the environment with a ghost it still needs access to\n-          // the charm so that's what this switcheroo is doing here.\n-          if (model.get('pending')) {\n-            type = 'ghost';\n-            model.set('packageName', charm.get('package_name'));\n-            config.charmModel = charm;\n-          }\n-\n-          // If the user is trying to open the same inspector twice\n-          var serviceInspector = this.getInspector(model.get('id'));\n-          if (serviceInspector) {\n-            return serviceInspector;\n-          }\n-\n-          var combinedConfig = {};\n-          var configs = this._generateConfigs(model);\n-\n-          if (type === 'ghost') {\n-            combinedConfig = Y.mix(configs.configBase, configs.configGhost,\n-                                   true, undefined, 0, true);\n-          } else if (type === 'service') {\n-            combinedConfig = Y.mix(configs.configBase, configs.configService,\n-                                   true, undefined, 0, true);\n-          }\n-\n-          Y.mix(combinedConfig, config, true, undefined, 0, true);\n-\n-          serviceInspector = new views.ServiceInspector(model, combinedConfig);\n-\n-          // Because the inspector can trigger it's own destruction we need to\n-          // listen for the event and remove it from the list of open inspectors\n-          serviceInspector.viewletManager.after('destroy', function(e) {\n-            this.setInspector(e.currentTarget, true);\n-            // We want the service menu to hide when the inspector does.\n-            // For now, at least, with only one inspector, we can simply close\n-            // all service menus.  We expect the service menus to go away\n-            // soon-ish anyway in favor of a new approach.\n-            this.topo.fire('hideServiceMenu');\n-          }, this);\n-\n-          // If the service is destroyed from the console then we need to\n-          // destroy the inspector and hide the service menu.\n-          model.on('destroy', function(e) {\n-            var service = e.currentTarget;\n-            var inspector = this.getInspector(service.get('id'));\n-            if (inspector) { inspector.viewletManager.destroy(); }\n-            this.topo.fire('hideServiceMenu');\n-          }, this);\n-\n-          // Restrict to a single inspector instance\n-          if (Y.Object.size(this._inspectors) >= 1) {\n-            Y.Object.each(this._inspectors, function(inspector) {\n-              inspector.viewletManager.destroy();\n-            });\n+  var EnvironmentView = Y.Base.create('EnvironmentView', Y.View, [\n+      views.JujuBaseView, Y.Event.EventTracker" , "path" : "app/views/environment.js" , "position" : 133 , "original_position" : 133 , "commit_id" : "a7149187c9758ec3e8cc64caefa136401c0d90a6" , "original_commit_id" : "0ac74580017cc73ad98dff02beb7535d7a56ae1f" , "user" : { "login" : "mitechie" , "id" : 75915 , "avatar_url" : "https://gravatar.com/avatar/1641c0f988b844f44de596fcef3adc62?d=https%3A%2F%2Fidenticons.github.com%2F66777cfa12d147e4836069653448250b.png&r=x" , "gravatar_id" : "1641c0f988b844f44de596fcef3adc62" , "url" : "https://api.github.com/users/mitechie" , "html_url" : "https://github.com/mitechie" , "followers_url" : "https://api.github.com/users/mitechie/followers" , "following_url" : "https://api.github.com/users/mitechie/following{/other_user}" , "gists_url" : "https://api.github.com/users/mitechie/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/mitechie/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/mitechie/subscriptions" , "organizations_url" : "https://api.github.com/users/mitechie/orgs" , "repos_url" : "https://api.github.com/users/mitechie/repos" , "events_url" : "https://api.github.com/users/mitechie/events{/privacy}" , "received_events_url" : "https://api.github.com/users/mitechie/received_events" , "type" : "User" , "site_admin" : false} , "body" : "Added the EventTracker on here to do proper event cleanup. This required some indentation love." , "created_at" : "2014-01-29T01:47:03Z" , "updated_at" : "2014-01-29T13:03:02Z" , "html_url" : "https://github.com/juju/juju-gui/pull/91#discussion_r9253972" , "pull_request_url" : "https://api.github.com/repos/juju/juju-gui/pulls/91" , "_links" : { "self" : { "href" : "https://api.github.com/repos/juju/juju-gui/pulls/comments/9253972"} , "html" : { "href" : "https://github.com/juju/juju-gui/pull/91#discussion_r9253972"} , "pull_request" : { "href" : "https://api.github.com/repos/juju/juju-gui/pulls/91"}} , "owner" : "juju" , "repo" : "juju-gui" , "pullreq_id" : 91}
{ "_id" : { "$oid" : "52e961cbbd3543fe92004af2"} , "url" : "https://api.github.com/repos/juju/juju-gui/pulls/comments/9254021" , "id" : 9254021 , "diff_hunk" : "@@ -37,405 +37,432 @@ YUI.add('juju-view-environment', function(Y) {\n    *\n    * @class EnvironmentView\n    */\n-  var EnvironmentView = Y.Base.create('EnvironmentView', Y.View,\n-                                      [views.JujuBaseView],\n-      {\n-        /**\n-         * @method EnvironmentView.initializer\n-         */\n-        initializer: function() {\n-          this.publish('navigateTo', {\n-            broadcast: true,\n-            preventable: false});\n-\n-          this._inspectors = {};\n-        },\n-\n-        /**\n-         * Wrapper around topo.update. Rather than re-rendering a whole\n-         * topology, the view can require data updates when needed.\n-         * Ideally even this should not be needed, as we can observe\n-         * ModelList change events and debounce update calculations\n-         * internally.\n-         *\n-         * @method update\n-         * @chainable\n-         */\n-        update: function() {\n-          this.topo.update();\n-          return this;\n-        },\n-\n-        /**\n-          @method getInspector\n-          @return {Object} inspector.\n-        */\n-        getInspector: function(name) {\n-          return this._inspectors[name];\n-        },\n-\n-        /**\n-          @method setInspector\n-          @param {ViewletManager} inspector instance.\n-          @param {Boolean} remove flag to remove the instance.\n-          @chainable\n-        */\n-        setInspector: function(inspector, remove) {\n-          var name = inspector.getName();\n-          if (this._inspectors[name] !== undefined && !remove) {\n-            // Close the old inspector and remove it.\n-            var existing = this._inspectors[name];\n-            existing.bindingEngine.unbind();\n-            existing.container.remove(true);\n-          }\n-          if (remove) {\n-            delete this._inspectors[name];\n-          } else {\n-            this._inspectors[name] = inspector;\n-          }\n-          return this;\n-        },\n-\n-        /**\n-          Creates a new service inspector instance of the passed in type.\n-\n-          @method createServiceInspector\n-          @param {Y.Model} model service or charm depending on inspector type.\n-          @param {Object} config object of options to overwrite default config.\n-          @return {Object} The created service inspector.\n-        */\n-        createServiceInspector: function(model, config) {\n-          config = config || {};\n-          var type = 'service',\n-              charm = this.get('db').charms.getById(model.get('charm'));\n-\n-          // This method is called with a charm or service depending on if it's\n-          // called from the charm browser or from the environment. If it is\n-          // called from the environment with a ghost it still needs access to\n-          // the charm so that's what this switcheroo is doing here.\n-          if (model.get('pending')) {\n-            type = 'ghost';\n-            model.set('packageName', charm.get('package_name'));\n-            config.charmModel = charm;\n-          }\n-\n-          // If the user is trying to open the same inspector twice\n-          var serviceInspector = this.getInspector(model.get('id'));\n-          if (serviceInspector) {\n-            return serviceInspector;\n-          }\n-\n-          var combinedConfig = {};\n-          var configs = this._generateConfigs(model);\n-\n-          if (type === 'ghost') {\n-            combinedConfig = Y.mix(configs.configBase, configs.configGhost,\n-                                   true, undefined, 0, true);\n-          } else if (type === 'service') {\n-            combinedConfig = Y.mix(configs.configBase, configs.configService,\n-                                   true, undefined, 0, true);\n-          }\n-\n-          Y.mix(combinedConfig, config, true, undefined, 0, true);\n-\n-          serviceInspector = new views.ServiceInspector(model, combinedConfig);\n-\n-          // Because the inspector can trigger it's own destruction we need to\n-          // listen for the event and remove it from the list of open inspectors\n-          serviceInspector.viewletManager.after('destroy', function(e) {\n-            this.setInspector(e.currentTarget, true);\n-            // We want the service menu to hide when the inspector does.\n-            // For now, at least, with only one inspector, we can simply close\n-            // all service menus.  We expect the service menus to go away\n-            // soon-ish anyway in favor of a new approach.\n-            this.topo.fire('hideServiceMenu');\n-          }, this);\n-\n-          // If the service is destroyed from the console then we need to\n-          // destroy the inspector and hide the service menu.\n-          model.on('destroy', function(e) {\n-            var service = e.currentTarget;\n-            var inspector = this.getInspector(service.get('id'));\n-            if (inspector) { inspector.viewletManager.destroy(); }\n-            this.topo.fire('hideServiceMenu');\n-          }, this);\n-\n-          // Restrict to a single inspector instance\n-          if (Y.Object.size(this._inspectors) >= 1) {\n-            Y.Object.each(this._inspectors, function(inspector) {\n-              inspector.viewletManager.destroy();\n-            });\n+  var EnvironmentView = Y.Base.create('EnvironmentView', Y.View, [\n+      views.JujuBaseView, Y.Event.EventTracker\n+  ], {\n+    /**\n+     * @method EnvironmentView.initializer\n+     */\n+    initializer: function() {\n+      this.publish('navigateTo', {\n+        broadcast: true,\n+        preventable: false});\n+\n+      this._inspectors = {};\n+    },\n+\n+\n+    destructor: function() {\n+\n+\n+    },\n+\n+    /**\n+     * Wrapper around topo.update. Rather than re-rendering a whole\n+     * topology, the view can require data updates when needed.\n+     * Ideally even this should not be needed, as we can observe\n+     * ModelList change events and debounce update calculations\n+     * internally.\n+     *\n+     * @method update\n+     * @chainable\n+     */\n+    update: function() {\n+      this.topo.update();\n+      return this;\n+    },\n+\n+    /**\n+      @method getInspector\n+      @return {Object} inspector.\n+    */\n+    getInspector: function(name) {\n+      return this._inspectors[name];\n+    },\n+\n+    /**\n+      @method setInspector\n+      @param {ViewletManager} inspector instance.\n+      @param {Boolean} remove flag to remove the instance.\n+      @chainable\n+    */\n+    setInspector: function(inspector, remove) {\n+      var name = inspector.getName();\n+      if (this._inspectors[name] !== undefined && !remove) {\n+        // Close the old inspector and remove it.\n+        var existing = this._inspectors[name];\n+        existing.bindingEngine.unbind();\n+        existing.container.remove(true);\n+      }\n+      if (remove) {\n+        delete this._inspectors[name];\n+      } else {\n+        this._inspectors[name] = inspector;\n+      }\n+      return this;\n+    },\n+\n+    /**\n+      Creates a new service inspector instance of the passed in type.\n+\n+      @method createServiceInspector\n+      @param {Y.Model} model service or charm depending on inspector type.\n+      @param {Object} config object of options to overwrite default config.\n+      @return {Object} The created service inspector.\n+    */\n+    createServiceInspector: function(model, config) {\n+      config = config || {};\n+      var type = 'service',\n+          charm = this.get('db').charms.getById(model.get('charm'));\n+\n+      // This method is called with a charm or service depending on if it's\n+      // called from the charm browser or from the environment. If it is\n+      // called from the environment with a ghost it still needs access to\n+      // the charm so that's what this switcheroo is doing here.\n+      if (model.get('pending')) {\n+        type = 'ghost';\n+        model.set('packageName', charm.get('package_name'));\n+        config.charmModel = charm;\n+      }\n+\n+      // If the user is trying to open the same inspector twice\n+      var serviceInspector = this.getInspector(model.get('id'));\n+      if (serviceInspector) {\n+        return serviceInspector;\n+      }\n+\n+      var combinedConfig = {};\n+      var configs = this._generateConfigs(model);\n+\n+      if (type === 'ghost') {\n+        combinedConfig = Y.mix(configs.configBase, configs.configGhost,\n+                               true, undefined, 0, true);\n+      } else if (type === 'service') {\n+        combinedConfig = Y.mix(configs.configBase, configs.configService,\n+                               true, undefined, 0, true);\n+      }\n+\n+      Y.mix(combinedConfig, config, true, undefined, 0, true);\n+\n+      serviceInspector = new views.ServiceInspector(model, combinedConfig);\n+\n+      // Because the inspector can trigger it's own destruction we need to\n+      // listen for the event and remove it from the list of open inspectors\n+      serviceInspector.viewletManager.after('destroy', function(e) {\n+        this.setInspector(e.currentTarget, true);\n+        // We want the service menu to hide when the inspector does.\n+        // For now, at least, with only one inspector, we can simply close\n+        // all service menus.  We expect the service menus to go away\n+        // soon-ish anyway in favor of a new approach.\n+        this.topo.fire('hideServiceMenu');\n+      }, this);\n+\n+\n+      // If the service is destroyed from the console then we need to\n+      // destroy the inspector and hide the service menu.\n+      model.on('destroy', function(e) {\n+        var service = e.currentTarget;\n+        var inspector = this.getInspector(service.get('id'));\n+        if (inspector) { inspector.viewletManager.destroy(); }\n+        this.topo.fire('hideServiceMenu');\n+      }, this);\n+\n+      // Restrict to a single inspector instance\n+      if (Y.Object.size(this._inspectors) >= 1) {\n+        Y.Object.each(this._inspectors, function(inspector) {\n+          inspector.viewletManager.destroy();\n+        });\n+      }\n+\n+      // If the inspector (via viewletManager proxy) wants to take over the" , "path" : "app/views/environment.js" , "position" : 263 , "original_position" : 269 , "commit_id" : "a7149187c9758ec3e8cc64caefa136401c0d90a6" , "original_commit_id" : "0ac74580017cc73ad98dff02beb7535d7a56ae1f" , "user" : { "login" : "mitechie" , "id" : 75915 , "avatar_url" : "https://gravatar.com/avatar/1641c0f988b844f44de596fcef3adc62?d=https%3A%2F%2Fidenticons.github.com%2F66777cfa12d147e4836069653448250b.png&r=x" , "gravatar_id" : "1641c0f988b844f44de596fcef3adc62" , "url" : "https://api.github.com/users/mitechie" , "html_url" : "https://github.com/mitechie" , "followers_url" : "https://api.github.com/users/mitechie/followers" , "following_url" : "https://api.github.com/users/mitechie/following{/other_user}" , "gists_url" : "https://api.github.com/users/mitechie/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/mitechie/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/mitechie/subscriptions" , "organizations_url" : "https://api.github.com/users/mitechie/orgs" , "repos_url" : "https://api.github.com/users/mitechie/repos" , "events_url" : "https://api.github.com/users/mitechie/events{/privacy}" , "received_events_url" : "https://api.github.com/users/mitechie/received_events" , "type" : "User" , "site_admin" : false} , "body" : "The inspector isn't a YUI object and has no fire/on hooks to grab into. However, the viewletManager is YUI event friendly and so we use that as a proxy point to keep things at the inspector level.\r\n\r\nThe event catching the trigger from the inspector and refires up to the app as the env version. " , "created_at" : "2014-01-29T01:50:02Z" , "updated_at" : "2014-01-29T13:03:02Z" , "html_url" : "https://github.com/juju/juju-gui/pull/91#discussion_r9254021" , "pull_request_url" : "https://api.github.com/repos/juju/juju-gui/pulls/91" , "_links" : { "self" : { "href" : "https://api.github.com/repos/juju/juju-gui/pulls/comments/9254021"} , "html" : { "href" : "https://github.com/juju/juju-gui/pull/91#discussion_r9254021"} , "pull_request" : { "href" : "https://api.github.com/repos/juju/juju-gui/pulls/91"}} , "owner" : "juju" , "repo" : "juju-gui" , "pullreq_id" : 91}
{ "_id" : { "$oid" : "52e961cbbd3543fe92004af3"} , "url" : "https://api.github.com/repos/juju/juju-gui/pulls/comments/9254064" , "id" : 9254064 , "diff_hunk" : "@@ -859,6 +859,7 @@ YUI.add('juju-view-inspector', function(Y) {\n       var service = db.services.getById(unitName.split('/')[0]);\n       var unit = service.get('units').getById(unitName);\n       this.viewletManager.showViewlet('unitDetails', unit);\n+      this.viewletManager.fire('inspectorTakeoverStarting');" , "path" : "app/views/inspector.js" , "position" : 4 , "original_position" : 4 , "commit_id" : "a7149187c9758ec3e8cc64caefa136401c0d90a6" , "original_commit_id" : "0ac74580017cc73ad98dff02beb7535d7a56ae1f" , "user" : { "login" : "mitechie" , "id" : 75915 , "avatar_url" : "https://gravatar.com/avatar/1641c0f988b844f44de596fcef3adc62?d=https%3A%2F%2Fidenticons.github.com%2F66777cfa12d147e4836069653448250b.png&r=x" , "gravatar_id" : "1641c0f988b844f44de596fcef3adc62" , "url" : "https://api.github.com/users/mitechie" , "html_url" : "https://github.com/mitechie" , "followers_url" : "https://api.github.com/users/mitechie/followers" , "following_url" : "https://api.github.com/users/mitechie/following{/other_user}" , "gists_url" : "https://api.github.com/users/mitechie/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/mitechie/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/mitechie/subscriptions" , "organizations_url" : "https://api.github.com/users/mitechie/orgs" , "repos_url" : "https://api.github.com/users/mitechie/repos" , "events_url" : "https://api.github.com/users/mitechie/events{/privacy}" , "received_events_url" : "https://api.github.com/users/mitechie/received_events" , "type" : "User" , "site_admin" : false} , "body" : "So here's the triggering off the viewletManager up to the environment view." , "created_at" : "2014-01-29T01:52:00Z" , "updated_at" : "2014-01-29T13:03:02Z" , "html_url" : "https://github.com/juju/juju-gui/pull/91#discussion_r9254064" , "pull_request_url" : "https://api.github.com/repos/juju/juju-gui/pulls/91" , "_links" : { "self" : { "href" : "https://api.github.com/repos/juju/juju-gui/pulls/comments/9254064"} , "html" : { "href" : "https://github.com/juju/juju-gui/pull/91#discussion_r9254064"} , "pull_request" : { "href" : "https://api.github.com/repos/juju/juju-gui/pulls/91"}} , "owner" : "juju" , "repo" : "juju-gui" , "pullreq_id" : 91}
{ "_id" : { "$oid" : "52e961cbbd3543fe92004af4"} , "url" : "https://api.github.com/repos/juju/juju-gui/pulls/comments/9256225" , "id" : 9256225 , "diff_hunk" : "@@ -1099,6 +1100,34 @@ YUI.add('juju-gui', function(Y) {\n          */\n         callback: function() {\n           this.views.environment.instance.rendered();\n+          this.addEvent(\n+            this.views.environment.instance.on('envTakeOverStarting', function(ev) {\n+              // When told that someone wants to take over the view, let them\n+              // have it.\n+              debugger;\n+              var charmbrowser = this.get('subApps').charmbrowser;\n+              // Capture the original view mode so we can set it back later.\n+              var originalViewMode = charmbrowser.getViewMode();\n+              // Once the takeover has ended, put the original view mode back.\n+              this.addEvent(" , "path" : "app/app.js" , "position" :  null  , "original_position" : 23 , "commit_id" : "a7149187c9758ec3e8cc64caefa136401c0d90a6" , "original_commit_id" : "63d06e6cf530627c94f08965ee44939b5d2e7aaa" , "user" : { "login" : "hatched" , "id" : 532033 , "avatar_url" : "https://gravatar.com/avatar/e95b5dccab0d75eadaccfe04bfd7ad59?d=https%3A%2F%2Fidenticons.github.com%2Fdb9c609946fb7872e803497473e0fb31.png&r=x" , "gravatar_id" : "e95b5dccab0d75eadaccfe04bfd7ad59" , "url" : "https://api.github.com/users/hatched" , "html_url" : "https://github.com/hatched" , "followers_url" : "https://api.github.com/users/hatched/followers" , "following_url" : "https://api.github.com/users/hatched/following{/other_user}" , "gists_url" : "https://api.github.com/users/hatched/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/hatched/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/hatched/subscriptions" , "organizations_url" : "https://api.github.com/users/hatched/orgs" , "repos_url" : "https://api.github.com/users/hatched/repos" , "events_url" : "https://api.github.com/users/hatched/events{/privacy}" , "received_events_url" : "https://api.github.com/users/hatched/received_events" , "type" : "User" , "site_admin" : false} , "body" : "This should be moved out of this callback because now a new event will be created every time envTakeOverStarting gets fired." , "created_at" : "2014-01-29T04:27:30Z" , "updated_at" : "2014-01-29T13:03:02Z" , "html_url" : "https://github.com/juju/juju-gui/pull/91#discussion_r9256225" , "pull_request_url" : "https://api.github.com/repos/juju/juju-gui/pulls/91" , "_links" : { "self" : { "href" : "https://api.github.com/repos/juju/juju-gui/pulls/comments/9256225"} , "html" : { "href" : "https://github.com/juju/juju-gui/pull/91#discussion_r9256225"} , "pull_request" : { "href" : "https://api.github.com/repos/juju/juju-gui/pulls/91"}} , "owner" : "juju" , "repo" : "juju-gui" , "pullreq_id" : 91}
{ "_id" : { "$oid" : "52e961cbbd3543fe92004af5"} , "url" : "https://api.github.com/repos/juju/juju-gui/pulls/comments/9256237" , "id" : 9256237 , "diff_hunk" : "@@ -1099,6 +1100,34 @@ YUI.add('juju-gui', function(Y) {\n          */\n         callback: function() {\n           this.views.environment.instance.rendered();\n+          this.addEvent(\n+            this.views.environment.instance.on('envTakeOverStarting', function(ev) {" , "path" : "app/app.js" , "position" : 56 , "original_position" : 15 , "commit_id" : "a7149187c9758ec3e8cc64caefa136401c0d90a6" , "original_commit_id" : "63d06e6cf530627c94f08965ee44939b5d2e7aaa" , "user" : { "login" : "hatched" , "id" : 532033 , "avatar_url" : "https://gravatar.com/avatar/e95b5dccab0d75eadaccfe04bfd7ad59?d=https%3A%2F%2Fidenticons.github.com%2Fdb9c609946fb7872e803497473e0fb31.png&r=x" , "gravatar_id" : "e95b5dccab0d75eadaccfe04bfd7ad59" , "url" : "https://api.github.com/users/hatched" , "html_url" : "https://github.com/hatched" , "followers_url" : "https://api.github.com/users/hatched/followers" , "following_url" : "https://api.github.com/users/hatched/following{/other_user}" , "gists_url" : "https://api.github.com/users/hatched/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/hatched/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/hatched/subscriptions" , "organizations_url" : "https://api.github.com/users/hatched/orgs" , "repos_url" : "https://api.github.com/users/hatched/repos" , "events_url" : "https://api.github.com/users/hatched/events{/privacy}" , "received_events_url" : "https://api.github.com/users/hatched/received_events" , "type" : "User" , "site_admin" : false} , "body" : "envTakeOverStarting is kind of a funny event name. Something like closeCharmBrowser might be more appropriate " , "created_at" : "2014-01-29T04:28:44Z" , "updated_at" : "2014-01-29T13:03:02Z" , "html_url" : "https://github.com/juju/juju-gui/pull/91#discussion_r9256237" , "pull_request_url" : "https://api.github.com/repos/juju/juju-gui/pulls/91" , "_links" : { "self" : { "href" : "https://api.github.com/repos/juju/juju-gui/pulls/comments/9256237"} , "html" : { "href" : "https://github.com/juju/juju-gui/pull/91#discussion_r9256237"} , "pull_request" : { "href" : "https://api.github.com/repos/juju/juju-gui/pulls/91"}} , "owner" : "juju" , "repo" : "juju-gui" , "pullreq_id" : 91}
{ "_id" : { "$oid" : "52e961cbbd3543fe92004af6"} , "url" : "https://api.github.com/repos/juju/juju-gui/pulls/comments/9264905" , "id" : 9264905 , "diff_hunk" : "@@ -1099,6 +1100,34 @@ YUI.add('juju-gui', function(Y) {\n          */\n         callback: function() {\n           this.views.environment.instance.rendered();\n+          this.addEvent(\n+            this.views.environment.instance.on('envTakeOverStarting', function(ev) {" , "path" : "app/app.js" , "position" : 56 , "original_position" : 15 , "commit_id" : "a7149187c9758ec3e8cc64caefa136401c0d90a6" , "original_commit_id" : "63d06e6cf530627c94f08965ee44939b5d2e7aaa" , "user" : { "login" : "mitechie" , "id" : 75915 , "avatar_url" : "https://gravatar.com/avatar/1641c0f988b844f44de596fcef3adc62?d=https%3A%2F%2Fidenticons.github.com%2F66777cfa12d147e4836069653448250b.png&r=x" , "gravatar_id" : "1641c0f988b844f44de596fcef3adc62" , "url" : "https://api.github.com/users/mitechie" , "html_url" : "https://github.com/mitechie" , "followers_url" : "https://api.github.com/users/mitechie/followers" , "following_url" : "https://api.github.com/users/mitechie/following{/other_user}" , "gists_url" : "https://api.github.com/users/mitechie/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/mitechie/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/mitechie/subscriptions" , "organizations_url" : "https://api.github.com/users/mitechie/orgs" , "repos_url" : "https://api.github.com/users/mitechie/repos" , "events_url" : "https://api.github.com/users/mitechie/events{/privacy}" , "received_events_url" : "https://api.github.com/users/mitechie/received_events" , "type" : "User" , "site_admin" : false} , "body" : "Well, the idea is that initially we hide/show but we'd like to be able to add logic in that determines if there's room for it to fit or not. So the idea is that someone is requesting to take over the screen and the app has the final say on what stays open/closes." , "created_at" : "2014-01-29T12:56:32Z" , "updated_at" : "2014-01-29T13:03:02Z" , "html_url" : "https://github.com/juju/juju-gui/pull/91#discussion_r9264905" , "pull_request_url" : "https://api.github.com/repos/juju/juju-gui/pulls/91" , "_links" : { "self" : { "href" : "https://api.github.com/repos/juju/juju-gui/pulls/comments/9264905"} , "html" : { "href" : "https://github.com/juju/juju-gui/pull/91#discussion_r9264905"} , "pull_request" : { "href" : "https://api.github.com/repos/juju/juju-gui/pulls/91"}} , "owner" : "juju" , "repo" : "juju-gui" , "pullreq_id" : 91}
{ "_id" : { "$oid" : "52e961cbbd3543fe92004af7"} , "url" : "https://api.github.com/repos/juju/juju-gui/pulls/comments/9264932" , "id" : 9264932 , "diff_hunk" : "@@ -1099,6 +1100,34 @@ YUI.add('juju-gui', function(Y) {\n          */\n         callback: function() {\n           this.views.environment.instance.rendered();\n+          this.addEvent(\n+            this.views.environment.instance.on('envTakeOverStarting', function(ev) {\n+              // When told that someone wants to take over the view, let them\n+              // have it.\n+              debugger;\n+              var charmbrowser = this.get('subApps').charmbrowser;\n+              // Capture the original view mode so we can set it back later.\n+              var originalViewMode = charmbrowser.getViewMode();\n+              // Once the takeover has ended, put the original view mode back.\n+              this.addEvent(" , "path" : "app/app.js" , "position" :  null  , "original_position" : 23 , "commit_id" : "a7149187c9758ec3e8cc64caefa136401c0d90a6" , "original_commit_id" : "63d06e6cf530627c94f08965ee44939b5d2e7aaa" , "user" : { "login" : "mitechie" , "id" : 75915 , "avatar_url" : "https://gravatar.com/avatar/1641c0f988b844f44de596fcef3adc62?d=https%3A%2F%2Fidenticons.github.com%2F66777cfa12d147e4836069653448250b.png&r=x" , "gravatar_id" : "1641c0f988b844f44de596fcef3adc62" , "url" : "https://api.github.com/users/mitechie" , "html_url" : "https://github.com/mitechie" , "followers_url" : "https://api.github.com/users/mitechie/followers" , "following_url" : "https://api.github.com/users/mitechie/following{/other_user}" , "gists_url" : "https://api.github.com/users/mitechie/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/mitechie/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/mitechie/subscriptions" , "organizations_url" : "https://api.github.com/users/mitechie/orgs" , "repos_url" : "https://api.github.com/users/mitechie/repos" , "events_url" : "https://api.github.com/users/mitechie/events{/privacy}" , "received_events_url" : "https://api.github.com/users/mitechie/received_events" , "type" : "User" , "site_admin" : false} , "body" : "I'll make sure it gets cleaned up, but it does need to get created because you could have been in a viewmode and that needs to get tracked. Each call to take over the screen needs to note what the current view was first." , "created_at" : "2014-01-29T12:57:42Z" , "updated_at" : "2014-01-29T13:03:02Z" , "html_url" : "https://github.com/juju/juju-gui/pull/91#discussion_r9264932" , "pull_request_url" : "https://api.github.com/repos/juju/juju-gui/pulls/91" , "_links" : { "self" : { "href" : "https://api.github.com/repos/juju/juju-gui/pulls/comments/9264932"} , "html" : { "href" : "https://github.com/juju/juju-gui/pull/91#discussion_r9264932"} , "pull_request" : { "href" : "https://api.github.com/repos/juju/juju-gui/pulls/91"}} , "owner" : "juju" , "repo" : "juju-gui" , "pullreq_id" : 91}
{ "_id" : { "$oid" : "52e961cbbd3543fe92004af8"} , "url" : "https://api.github.com/repos/juju/juju-gui/pulls/comments/9265011" , "id" : 9265011 , "diff_hunk" : "@@ -1099,6 +1100,34 @@ YUI.add('juju-gui', function(Y) {\n          */\n         callback: function() {\n           this.views.environment.instance.rendered();\n+          this.addEvent(\n+            this.views.environment.instance.on('envTakeOverStarting', function(ev) {\n+              // When told that someone wants to take over the view, let them\n+              // have it.\n+              debugger;\n+              var charmbrowser = this.get('subApps').charmbrowser;\n+              // Capture the original view mode so we can set it back later.\n+              var originalViewMode = charmbrowser.getViewMode();\n+              // Once the takeover has ended, put the original view mode back.\n+              this.addEvent(" , "path" : "app/app.js" , "position" :  null  , "original_position" : 23 , "commit_id" : "a7149187c9758ec3e8cc64caefa136401c0d90a6" , "original_commit_id" : "63d06e6cf530627c94f08965ee44939b5d2e7aaa" , "user" : { "login" : "mitechie" , "id" : 75915 , "avatar_url" : "https://gravatar.com/avatar/1641c0f988b844f44de596fcef3adc62?d=https%3A%2F%2Fidenticons.github.com%2F66777cfa12d147e4836069653448250b.png&r=x" , "gravatar_id" : "1641c0f988b844f44de596fcef3adc62" , "url" : "https://api.github.com/users/mitechie" , "html_url" : "https://github.com/mitechie" , "followers_url" : "https://api.github.com/users/mitechie/followers" , "following_url" : "https://api.github.com/users/mitechie/following{/other_user}" , "gists_url" : "https://api.github.com/users/mitechie/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/mitechie/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/mitechie/subscriptions" , "organizations_url" : "https://api.github.com/users/mitechie/orgs" , "repos_url" : "https://api.github.com/users/mitechie/repos" , "events_url" : "https://api.github.com/users/mitechie/events{/privacy}" , "received_events_url" : "https://api.github.com/users/mitechie/received_events" , "type" : "User" , "site_admin" : false} , "body" : "I am cleaning this up to be a separate function though. It shouldn't be all dumped in there like that. " , "created_at" : "2014-01-29T13:01:25Z" , "updated_at" : "2014-01-29T13:03:02Z" , "html_url" : "https://github.com/juju/juju-gui/pull/91#discussion_r9265011" , "pull_request_url" : "https://api.github.com/repos/juju/juju-gui/pulls/91" , "_links" : { "self" : { "href" : "https://api.github.com/repos/juju/juju-gui/pulls/comments/9265011"} , "html" : { "href" : "https://github.com/juju/juju-gui/pull/91#discussion_r9265011"} , "pull_request" : { "href" : "https://api.github.com/repos/juju/juju-gui/pulls/91"}} , "owner" : "juju" , "repo" : "juju-gui" , "pullreq_id" : 91}
{ "_id" : { "$oid" : "52e961cdbd354302ad004c81"} , "url" : "https://api.github.com/repos/edx/edx-platform/pulls/comments/9282510" , "id" : 9282510 , "diff_hunk" : "@@ -0,0 +1,69 @@\n+\"\"\"\n+Script for converting a tar.gz file representing an exported course\n+to the archive format used by a different version of export.\n+\"\"\"\n+import os\n+from path import path\n+from django.core.management.base import BaseCommand, CommandError\n+\n+from tempfile import mkdtemp\n+import tarfile\n+import shutil\n+from extract_tar import safetar_extractall\n+\n+from xmodule.modulestore.xml_exporter import convert_between_versions\n+\n+" , "path" : "cms/djangoapps/contentstore/management/commands/export_convert_format.py" , "position" : 16 , "original_position" : 16 , "commit_id" : "e21c589a641f970d68c6c3ea908cb2389a3d1908" , "original_commit_id" : "e21c589a641f970d68c6c3ea908cb2389a3d1908" , "user" : { "login" : "dmitchell" , "id" : 475919 , "avatar_url" : "https://gravatar.com/avatar/36268e32a487952477b6f129e590005f?d=https%3A%2F%2Fidenticons.github.com%2F960632db342526c34b11641429556100.png&r=x" , "gravatar_id" : "36268e32a487952477b6f129e590005f" , "url" : "https://api.github.com/users/dmitchell" , "html_url" : "https://github.com/dmitchell" , "followers_url" : "https://api.github.com/users/dmitchell/followers" , "following_url" : "https://api.github.com/users/dmitchell/following{/other_user}" , "gists_url" : "https://api.github.com/users/dmitchell/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/dmitchell/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/dmitchell/subscriptions" , "organizations_url" : "https://api.github.com/users/dmitchell/orgs" , "repos_url" : "https://api.github.com/users/dmitchell/repos" , "events_url" : "https://api.github.com/users/dmitchell/events{/privacy}" , "received_events_url" : "https://api.github.com/users/dmitchell/received_events" , "type" : "User" , "site_admin" : false} , "body" : "Most of these files have a sample invocation in the comments at the beginning of the file.\r\n```./manage.py export_convert_format mycourse.targ.gz ~/realformat/```" , "created_at" : "2014-01-29T20:17:15Z" , "updated_at" : "2014-01-29T20:17:15Z" , "html_url" : "https://github.com/edx/edx-platform/pull/2330#discussion_r9282510" , "pull_request_url" : "https://api.github.com/repos/edx/edx-platform/pulls/2330" , "_links" : { "self" : { "href" : "https://api.github.com/repos/edx/edx-platform/pulls/comments/9282510"} , "html" : { "href" : "https://github.com/edx/edx-platform/pull/2330#discussion_r9282510"} , "pull_request" : { "href" : "https://api.github.com/repos/edx/edx-platform/pulls/2330"}} , "repo" : "edx-platform" , "owner" : "edx" , "pullreq_id" : 2330}
{ "_id" : { "$oid" : "52e961d7bd3543febe003d25"} , "url" : "https://api.github.com/repos/mozilla-b2g/gaia/pulls/comments/9282514" , "id" : 9282514 , "diff_hunk" : "@@ -0,0 +1,127 @@\n+var selectors = require('./selectors');\n+var utils = require('./utils');\n+\n+function isLeaf(value) {\n+  return typeof value === 'string' || (value.query && value.method);\n+}\n+\n+function Clock(client) {\n+  this.client = client;\n+\n+  this.el = utils.deepMap(selectors, function(key, value) {\n+      var method = value.method || 'css selector';\n+      var query = value.query || value;\n+      Object.defineProperty(this, key, {\n+        get: function() {\n+          return client.findElement(query, method);\n+        }\n+      });\n+    }, { isLeaf: isLeaf });\n+\n+  this.els = utils.deepMap(selectors, function(key, value) {\n+      var method = value.method || 'css selector';\n+      var query = value.query || value;\n+      Object.defineProperty(this, key, {\n+        get: function() {\n+          return client.findElements(query, method);\n+        }\n+      });\n+    }, { isLeaf: isLeaf });\n+}\n+\n+module.exports = Clock;\n+\n+Clock.ORIGIN = 'app://clock.gaiamobile.org';\n+\n+/**\n+ * Create a Date object whose value is the supplied number of milliseconds from\n+ * the current system time.\n+ *\n+ * @param {Number} ms - The number of milliseconds from the current time to\n+ *                      create the Date. Optional (defaults to 0). May be\n+ *                      negative.\n+ * @return {Date}\n+ */\n+Clock.prototype.fromNow = function(ms) {\n+  ms = ms || 0;\n+  ms += this.client.executeScript(function() {\n+    return Date.now();\n+  });\n+  return new Date(ms);\n+};\n+\n+Clock.prototype.launch = function() {\n+  this.client.apps.launch(Clock.ORIGIN);\n+  this.client.apps.switchToApp(Clock.ORIGIN);\n+\n+  this.client.waitFor(ready.bind(this));\n+};\n+\n+function ready() {\n+  return this.el.alarm.analogClock.displayed() ||\n+    this.el.alarm.digitalClock.displayed();\n+}\n+\n+Clock.prototype.navigate = function(panelName) {\n+  var button, panel;\n+  if (panelName === 'alarmForm') {\n+    button = this.el.alarmFormBtn;\n+    panel = this.el.alarmForm;\n+  } else {\n+    button = this.el.tabs[panelName];\n+    panel = this.el.panels[panelName];\n+  }\n+\n+  button.tap();\n+  this.waitForSlideEnd(panel);\n+};\n+\n+Clock.prototype.waitForSlideEnd = function(element) {\n+  this.client.waitFor(function() {\n+    return element.displayed();\n+  });\n+\n+  this.client.waitFor(function() {\n+    return element.scriptWith(function(element) {\n+      return !element.className.match(/\\bslide-(in|out)-(right|left)\\b/);\n+    });\n+  });\n+};\n+\n+/**\n+ * Execute an action on an unstable DOM element.\n+ * In some cases, UI may be implemented by clearing some container DOM node and\n+ * re-rendering its contents completely. Because interaction cannot be modeled\n+ * as an atomic operation with Marionette (elements are always retrieved with\n+ * one command and acted upon with another), Marionette scripts that interact\n+ * with such UIs are prone to intermittent \"Stale element reference\" errors (an\n+ * element may be re-rendered while an interaction is taking place).\n+ *\n+ * This function allows tests to be written as though interaction were an\n+ * atomic operation.\n+ *\n+ * @param {Function} getElement - A function that returns a reference to an\n+ *                                the element.\n+ * @param {Function} interactWith - A function that accepts the element as its\n+ *                                  first argument and uses it as a target for\n+ *                                  some Marionette action.\n+ * @return {mixed} The result of the `interactWith` function.\n+ */\n+Clock.prototype.safeInteract = function(getElement, interactWith) {\n+  var result;\n+\n+  this.client.waitFor(function() {\n+    var el = getElement.call(this);" , "path" : "apps/clock/test/marionette/lib/clock.js" , "position" : 114 , "original_position" : 114 , "commit_id" : "23fb79258862ab303dfafad0bbaf7f962e28c677" , "original_commit_id" : "23fb79258862ab303dfafad0bbaf7f962e28c677" , "user" : { "login" : "gaye" , "id" : 535859 , "avatar_url" : "https://gravatar.com/avatar/e781ab5c4935bc74643c593608505556?d=https%3A%2F%2Fidenticons.github.com%2F1033eb54923520c4658b4e82513043b5.png&r=x" , "gravatar_id" : "e781ab5c4935bc74643c593608505556" , "url" : "https://api.github.com/users/gaye" , "html_url" : "https://github.com/gaye" , "followers_url" : "https://api.github.com/users/gaye/followers" , "following_url" : "https://api.github.com/users/gaye/following{/other_user}" , "gists_url" : "https://api.github.com/users/gaye/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/gaye/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/gaye/subscriptions" , "organizations_url" : "https://api.github.com/users/gaye/orgs" , "repos_url" : "https://api.github.com/users/gaye/repos" , "events_url" : "https://api.github.com/users/gaye/events{/privacy}" , "received_events_url" : "https://api.github.com/users/gaye/received_events" , "type" : "User" , "site_admin" : false} , "body" : "Ah okay. So it is assumed that getElement will fetch the element via marionette... my bad!" , "created_at" : "2014-01-29T20:17:19Z" , "updated_at" : "2014-01-29T20:17:19Z" , "html_url" : "https://github.com/mozilla-b2g/gaia/pull/15613#discussion_r9282514" , "pull_request_url" : "https://api.github.com/repos/mozilla-b2g/gaia/pulls/15613" , "_links" : { "self" : { "href" : "https://api.github.com/repos/mozilla-b2g/gaia/pulls/comments/9282514"} , "html" : { "href" : "https://github.com/mozilla-b2g/gaia/pull/15613#discussion_r9282514"} , "pull_request" : { "href" : "https://api.github.com/repos/mozilla-b2g/gaia/pulls/15613"}} , "repo" : "gaia" , "owner" : "mozilla-b2g" , "pullreq_id" : 15613}
{ "_id" : { "$oid" : "52e961dbbd3543febe003d2a"} , "url" : "https://api.github.com/repos/threadly/threadly/pulls/comments/9238797" , "id" : 9238797 , "diff_hunk" : "@@ -347,7 +349,7 @@ public void setCorePoolSize(int corePoolSize) {\n       boolean lookForExpiredWorkers = this.corePoolSize > corePoolSize;\n       \n       if (maxPoolSize < corePoolSize) {\n-        this.maxPoolSize = corePoolSize;\n+        setMaxPoolSize(corePoolSize);" , "path" : "src/main/java/org/threadly/concurrent/PriorityScheduledExecutor.java" , "position" : 21 , "original_position" : 21 , "commit_id" : "4b271259fa8ca89e57a0ec809ca07d8df43384f4" , "original_commit_id" : "343ce36da23aa28619fd843d7bda2376da094254" , "user" : { "login" : "jentfoo" , "id" : 2165757 , "avatar_url" : "https://gravatar.com/avatar/14b0ef66ee0e52a0908ac4b5617637a0?d=https%3A%2F%2Fidenticons.github.com%2F5b9cd097595c6da5a584220f74c40003.png&r=x" , "gravatar_id" : "14b0ef66ee0e52a0908ac4b5617637a0" , "url" : "https://api.github.com/users/jentfoo" , "html_url" : "https://github.com/jentfoo" , "followers_url" : "https://api.github.com/users/jentfoo/followers" , "following_url" : "https://api.github.com/users/jentfoo/following{/other_user}" , "gists_url" : "https://api.github.com/users/jentfoo/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/jentfoo/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/jentfoo/subscriptions" , "organizations_url" : "https://api.github.com/users/jentfoo/orgs" , "repos_url" : "https://api.github.com/users/jentfoo/repos" , "events_url" : "https://api.github.com/users/jentfoo/events{/privacy}" , "received_events_url" : "https://api.github.com/users/jentfoo/received_events" , "type" : "User" , "site_admin" : false} , "body" : "We must now call into setMaxPoolSize in case we need to create workers" , "created_at" : "2014-01-28T18:51:41Z" , "updated_at" : "2014-01-28T19:30:29Z" , "html_url" : "https://github.com/threadly/threadly/pull/55#discussion_r9238797" , "pull_request_url" : "https://api.github.com/repos/threadly/threadly/pulls/55" , "_links" : { "self" : { "href" : "https://api.github.com/repos/threadly/threadly/pulls/comments/9238797"} , "html" : { "href" : "https://github.com/threadly/threadly/pull/55#discussion_r9238797"} , "pull_request" : { "href" : "https://api.github.com/repos/threadly/threadly/pulls/55"}} , "owner" : "threadly" , "repo" : "threadly" , "pullreq_id" : 55}
{ "_id" : { "$oid" : "52e961dbbd3543febe003d2b"} , "url" : "https://api.github.com/repos/threadly/threadly/pulls/comments/9238819" , "id" : 9238819 , "diff_hunk" : "@@ -928,9 +942,18 @@ private void addToLowPriorityQueue(TaskWrapper task) {\n                                    QUEUE_CONSUMER_THREAD_NAME_LOW_PRIORITY);\n   }\n   \n+  \n+  /**\n+   * This function REQUIRES that workersLock is synchronized before calling.\n+   * \n+   * @param maxWaitTimeInMs time to wait for a worker to become available\n+   * @return an available worker, or null if no worker became available within the maxWaitTimeInMs\n+   * @throws InterruptedException Thrown if thread is interrupted while waiting for worker\n+   */\n   protected Worker getExistingWorker(long maxWaitTimeInMs) throws InterruptedException {\n-    synchronized (workersLock) {\n-      long startTime = Clock.accurateTime();\n+    long startTime = Clock.accurateTime();\n+    waitingForWorkerCount++;" , "path" : "src/main/java/org/threadly/concurrent/PriorityScheduledExecutor.java" , "position" : 71 , "original_position" : 71 , "commit_id" : "4b271259fa8ca89e57a0ec809ca07d8df43384f4" , "original_commit_id" : "343ce36da23aa28619fd843d7bda2376da094254" , "user" : { "login" : "jentfoo" , "id" : 2165757 , "avatar_url" : "https://gravatar.com/avatar/14b0ef66ee0e52a0908ac4b5617637a0?d=https%3A%2F%2Fidenticons.github.com%2F5b9cd097595c6da5a584220f74c40003.png&r=x" , "gravatar_id" : "14b0ef66ee0e52a0908ac4b5617637a0" , "url" : "https://api.github.com/users/jentfoo" , "html_url" : "https://github.com/jentfoo" , "followers_url" : "https://api.github.com/users/jentfoo/followers" , "following_url" : "https://api.github.com/users/jentfoo/following{/other_user}" , "gists_url" : "https://api.github.com/users/jentfoo/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/jentfoo/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/jentfoo/subscriptions" , "organizations_url" : "https://api.github.com/users/jentfoo/orgs" , "repos_url" : "https://api.github.com/users/jentfoo/repos" , "events_url" : "https://api.github.com/users/jentfoo/events{/privacy}" , "received_events_url" : "https://api.github.com/users/jentfoo/received_events" , "type" : "User" , "site_admin" : false} , "body" : "Indicate that this thread has the potential to block waiting for a worker to be created." , "created_at" : "2014-01-28T18:52:13Z" , "updated_at" : "2014-01-28T19:30:29Z" , "html_url" : "https://github.com/threadly/threadly/pull/55#discussion_r9238819" , "pull_request_url" : "https://api.github.com/repos/threadly/threadly/pulls/55" , "_links" : { "self" : { "href" : "https://api.github.com/repos/threadly/threadly/pulls/comments/9238819"} , "html" : { "href" : "https://github.com/threadly/threadly/pull/55#discussion_r9238819"} , "pull_request" : { "href" : "https://api.github.com/repos/threadly/threadly/pulls/55"}} , "owner" : "threadly" , "repo" : "threadly" , "pullreq_id" : 55}
{ "_id" : { "$oid" : "52e961dbbd3543febe003d2c"} , "url" : "https://api.github.com/repos/threadly/threadly/pulls/comments/9238833" , "id" : 9238833 , "diff_hunk" : "@@ -1040,8 +1068,8 @@ protected void expireOldWorkers() {\n       // we search backwards because the oldest workers will be at the back of the stack\n       while ((currentPoolSize > corePoolSize || allowCorePoolTimeout) && \n              ! availableWorkers.isEmpty() && \n-             (currentPoolSize > maxPoolSize || // it does not matter how old it is, the max pool size has changed\n-                now - availableWorkers.getLast().getLastRunTime() > keepAliveTimeInMs)) {\n+             (now - availableWorkers.getLast().getLastRunTime() > keepAliveTimeInMs || " , "path" : "src/main/java/org/threadly/concurrent/PriorityScheduledExecutor.java" , "position" : 114 , "original_position" : 114 , "commit_id" : "4b271259fa8ca89e57a0ec809ca07d8df43384f4" , "original_commit_id" : "343ce36da23aa28619fd843d7bda2376da094254" , "user" : { "login" : "jentfoo" , "id" : 2165757 , "avatar_url" : "https://gravatar.com/avatar/14b0ef66ee0e52a0908ac4b5617637a0?d=https%3A%2F%2Fidenticons.github.com%2F5b9cd097595c6da5a584220f74c40003.png&r=x" , "gravatar_id" : "14b0ef66ee0e52a0908ac4b5617637a0" , "url" : "https://api.github.com/users/jentfoo" , "html_url" : "https://github.com/jentfoo" , "followers_url" : "https://api.github.com/users/jentfoo/followers" , "following_url" : "https://api.github.com/users/jentfoo/following{/other_user}" , "gists_url" : "https://api.github.com/users/jentfoo/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/jentfoo/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/jentfoo/subscriptions" , "organizations_url" : "https://api.github.com/users/jentfoo/orgs" , "repos_url" : "https://api.github.com/users/jentfoo/repos" , "events_url" : "https://api.github.com/users/jentfoo/events{/privacy}" , "received_events_url" : "https://api.github.com/users/jentfoo/received_events" , "type" : "User" , "site_admin" : false} , "body" : "Reversed these two conditions so the more common one is first" , "created_at" : "2014-01-28T18:52:32Z" , "updated_at" : "2014-01-28T19:30:29Z" , "html_url" : "https://github.com/threadly/threadly/pull/55#discussion_r9238833" , "pull_request_url" : "https://api.github.com/repos/threadly/threadly/pulls/55" , "_links" : { "self" : { "href" : "https://api.github.com/repos/threadly/threadly/pulls/comments/9238833"} , "html" : { "href" : "https://github.com/threadly/threadly/pull/55#discussion_r9238833"} , "pull_request" : { "href" : "https://api.github.com/repos/threadly/threadly/pulls/55"}} , "owner" : "threadly" , "repo" : "threadly" , "pullreq_id" : 55}
{ "_id" : { "$oid" : "52e961dbbd3543febe003d2d"} , "url" : "https://api.github.com/repos/threadly/threadly/pulls/comments/9238858" , "id" : 9238858 , "diff_hunk" : "@@ -1035,19 +1035,20 @@ public void getExistingWorkerTest() {\n   public static void getExistingWorkerTest(PriorityScheduledExecutorFactory factory) {\n     PriorityScheduledExecutor scheduler = factory.make(1, 1, 1000);\n     try {\n-      // add an idle worker\n-      Worker testWorker = scheduler.makeNewWorker();\n-      scheduler.workerDone(testWorker);\n-      \n-      assertEquals(1, scheduler.availableWorkers.size());\n-      \n-      try {\n-        Worker returnedWorker = scheduler.getExistingWorker(100);\n-        assertTrue(returnedWorker == testWorker);\n-      } catch (InterruptedException e) {\n-        Thread.currentThread().interrupt();\n+      synchronized (scheduler.workersLock) {" , "path" : "src/test/java/org/threadly/concurrent/PriorityScheduledExecutorTest.java" , "position" : 148 , "original_position" : 108 , "commit_id" : "4b271259fa8ca89e57a0ec809ca07d8df43384f4" , "original_commit_id" : "343ce36da23aa28619fd843d7bda2376da094254" , "user" : { "login" : "jentfoo" , "id" : 2165757 , "avatar_url" : "https://gravatar.com/avatar/14b0ef66ee0e52a0908ac4b5617637a0?d=https%3A%2F%2Fidenticons.github.com%2F5b9cd097595c6da5a584220f74c40003.png&r=x" , "gravatar_id" : "14b0ef66ee0e52a0908ac4b5617637a0" , "url" : "https://api.github.com/users/jentfoo" , "html_url" : "https://github.com/jentfoo" , "followers_url" : "https://api.github.com/users/jentfoo/followers" , "following_url" : "https://api.github.com/users/jentfoo/following{/other_user}" , "gists_url" : "https://api.github.com/users/jentfoo/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/jentfoo/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/jentfoo/subscriptions" , "organizations_url" : "https://api.github.com/users/jentfoo/orgs" , "repos_url" : "https://api.github.com/users/jentfoo/repos" , "events_url" : "https://api.github.com/users/jentfoo/events{/privacy}" , "received_events_url" : "https://api.github.com/users/jentfoo/received_events" , "type" : "User" , "site_admin" : false} , "body" : "Must change because we no longer are synchronizing in the makeNewWorkerFunction" , "created_at" : "2014-01-28T18:53:02Z" , "updated_at" : "2014-01-28T19:30:29Z" , "html_url" : "https://github.com/threadly/threadly/pull/55#discussion_r9238858" , "pull_request_url" : "https://api.github.com/repos/threadly/threadly/pulls/55" , "_links" : { "self" : { "href" : "https://api.github.com/repos/threadly/threadly/pulls/comments/9238858"} , "html" : { "href" : "https://github.com/threadly/threadly/pull/55#discussion_r9238858"} , "pull_request" : { "href" : "https://api.github.com/repos/threadly/threadly/pulls/55"}} , "owner" : "threadly" , "repo" : "threadly" , "pullreq_id" : 55}
{ "_id" : { "$oid" : "52e961dbbd3543febe003d2e"} , "url" : "https://api.github.com/repos/threadly/threadly/pulls/comments/9238864" , "id" : 9238864 , "diff_hunk" : "@@ -1061,29 +1062,31 @@ public void lookForExpiredWorkersTest() {\n   public static void lookForExpiredWorkersTest(PriorityScheduledExecutorFactory factory) {\n     PriorityScheduledExecutor scheduler = factory.make(1, 1, 0);\n     try {\n-      // add an idle worker\n-      Worker testWorker = scheduler.makeNewWorker();\n-      scheduler.workerDone(testWorker);\n-      \n-      assertEquals(1, scheduler.availableWorkers.size());\n-      \n-      TestUtils.blockTillClockAdvances();\n-      Clock.accurateTime(); // update clock so scheduler will see it\n-      \n-      scheduler.expireOldWorkers();\n-      \n-      // should not have collected yet due to core size == 1\n-      assertEquals(1, scheduler.availableWorkers.size());\n-\n-      scheduler.allowCoreThreadTimeOut(true);\n-      \n-      TestUtils.blockTillClockAdvances();\n-      Clock.accurateTime(); // update clock so scheduler will see it\n-      \n-      scheduler.expireOldWorkers();\n-      \n-      // verify collected now\n-      assertEquals(0, scheduler.availableWorkers.size());\n+      synchronized (scheduler.workersLock) {" , "path" : "src/test/java/org/threadly/concurrent/PriorityScheduledExecutorTest.java" , "position" : 193 , "original_position" : 153 , "commit_id" : "4b271259fa8ca89e57a0ec809ca07d8df43384f4" , "original_commit_id" : "343ce36da23aa28619fd843d7bda2376da094254" , "user" : { "login" : "jentfoo" , "id" : 2165757 , "avatar_url" : "https://gravatar.com/avatar/14b0ef66ee0e52a0908ac4b5617637a0?d=https%3A%2F%2Fidenticons.github.com%2F5b9cd097595c6da5a584220f74c40003.png&r=x" , "gravatar_id" : "14b0ef66ee0e52a0908ac4b5617637a0" , "url" : "https://api.github.com/users/jentfoo" , "html_url" : "https://github.com/jentfoo" , "followers_url" : "https://api.github.com/users/jentfoo/followers" , "following_url" : "https://api.github.com/users/jentfoo/following{/other_user}" , "gists_url" : "https://api.github.com/users/jentfoo/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/jentfoo/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/jentfoo/subscriptions" , "organizations_url" : "https://api.github.com/users/jentfoo/orgs" , "repos_url" : "https://api.github.com/users/jentfoo/repos" , "events_url" : "https://api.github.com/users/jentfoo/events{/privacy}" , "received_events_url" : "https://api.github.com/users/jentfoo/received_events" , "type" : "User" , "site_admin" : false} , "body" : "Must change because we no longer are synchronizing in the makeNewWorkerFunction" , "created_at" : "2014-01-28T18:53:09Z" , "updated_at" : "2014-01-28T19:30:29Z" , "html_url" : "https://github.com/threadly/threadly/pull/55#discussion_r9238864" , "pull_request_url" : "https://api.github.com/repos/threadly/threadly/pulls/55" , "_links" : { "self" : { "href" : "https://api.github.com/repos/threadly/threadly/pulls/comments/9238864"} , "html" : { "href" : "https://github.com/threadly/threadly/pull/55#discussion_r9238864"} , "pull_request" : { "href" : "https://api.github.com/repos/threadly/threadly/pulls/55"}} , "owner" : "threadly" , "repo" : "threadly" , "pullreq_id" : 55}
{ "_id" : { "$oid" : "52e961dbbd3543febe003d2f"} , "url" : "https://api.github.com/repos/threadly/threadly/pulls/comments/9238885" , "id" : 9238885 , "diff_hunk" : "@@ -0,0 +1,72 @@\n+package org.threadly.concurrent;\n+\n+import java.util.concurrent.ThreadFactory;\n+\n+/**\n+ * In order to avoid a performance hit by verifying state which would indicate a programmer \n+ * error at runtime.  This class functions to verify those little things during unit tests.  \n+ * For that reason this class extends {@link PriorityScheduledExecutor} to do additional \n+ * functions, but calls into the super functions to verify the actual behavior. \n+ * \n+ * @author jent - Mike Jensen\n+ */\n+public class StrictPriorityScheduledExecutor extends PriorityScheduledExecutor {\n+  @SuppressWarnings(\"javadoc\")\n+  public StrictPriorityScheduledExecutor(int corePoolSize, int maxPoolSize,\n+                                         long keepAliveTimeInMs) {\n+    super(corePoolSize, maxPoolSize, keepAliveTimeInMs);\n+  }\n+\n+  @SuppressWarnings(\"javadoc\")\n+  public StrictPriorityScheduledExecutor(int corePoolSize, int maxPoolSize,\n+                                         long keepAliveTimeInMs, boolean useDaemonThreads) {\n+    super(corePoolSize, maxPoolSize, keepAliveTimeInMs, useDaemonThreads);\n+  }\n+\n+  @SuppressWarnings(\"javadoc\")\n+  public StrictPriorityScheduledExecutor(int corePoolSize, int maxPoolSize,\n+                                         long keepAliveTimeInMs, TaskPriority defaultPriority, \n+                                         long maxWaitForLowPriorityInMs) {\n+    super(corePoolSize, maxPoolSize, keepAliveTimeInMs, \n+          defaultPriority, maxWaitForLowPriorityInMs);\n+  }\n+\n+  @SuppressWarnings(\"javadoc\")\n+  public StrictPriorityScheduledExecutor(int corePoolSize, int maxPoolSize,\n+                                         long keepAliveTimeInMs, TaskPriority defaultPriority, \n+                                         long maxWaitForLowPriorityInMs, \n+                                         final boolean useDaemonThreads) {\n+    super(corePoolSize, maxPoolSize, keepAliveTimeInMs, \n+          defaultPriority, maxWaitForLowPriorityInMs, \n+          useDaemonThreads);\n+  }\n+\n+  @SuppressWarnings(\"javadoc\")\n+  public StrictPriorityScheduledExecutor(int corePoolSize, int maxPoolSize,\n+                                         long keepAliveTimeInMs, TaskPriority defaultPriority, \n+                                         long maxWaitForLowPriorityInMs, ThreadFactory threadFactory) {\n+    super(corePoolSize, maxPoolSize, keepAliveTimeInMs, \n+          defaultPriority, maxWaitForLowPriorityInMs, \n+          threadFactory);\n+  }\n+  \n+  private void verifyWorkersLock() {" , "path" : "src/test/java/org/threadly/concurrent/StrictPriorityScheduledExecutor.java" , "position" : 53 , "original_position" : 53 , "commit_id" : "4b271259fa8ca89e57a0ec809ca07d8df43384f4" , "original_commit_id" : "343ce36da23aa28619fd843d7bda2376da094254" , "user" : { "login" : "jentfoo" , "id" : 2165757 , "avatar_url" : "https://gravatar.com/avatar/14b0ef66ee0e52a0908ac4b5617637a0?d=https%3A%2F%2Fidenticons.github.com%2F5b9cd097595c6da5a584220f74c40003.png&r=x" , "gravatar_id" : "14b0ef66ee0e52a0908ac4b5617637a0" , "url" : "https://api.github.com/users/jentfoo" , "html_url" : "https://github.com/jentfoo" , "followers_url" : "https://api.github.com/users/jentfoo/followers" , "following_url" : "https://api.github.com/users/jentfoo/following{/other_user}" , "gists_url" : "https://api.github.com/users/jentfoo/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/jentfoo/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/jentfoo/subscriptions" , "organizations_url" : "https://api.github.com/users/jentfoo/orgs" , "repos_url" : "https://api.github.com/users/jentfoo/repos" , "events_url" : "https://api.github.com/users/jentfoo/events{/privacy}" , "received_events_url" : "https://api.github.com/users/jentfoo/received_events" , "type" : "User" , "site_admin" : false} , "body" : "Verifies that any time in test this is called the workersLock has been synchronized first" , "created_at" : "2014-01-28T18:53:37Z" , "updated_at" : "2014-01-28T19:30:29Z" , "html_url" : "https://github.com/threadly/threadly/pull/55#discussion_r9238885" , "pull_request_url" : "https://api.github.com/repos/threadly/threadly/pulls/55" , "_links" : { "self" : { "href" : "https://api.github.com/repos/threadly/threadly/pulls/comments/9238885"} , "html" : { "href" : "https://github.com/threadly/threadly/pull/55#discussion_r9238885"} , "pull_request" : { "href" : "https://api.github.com/repos/threadly/threadly/pulls/55"}} , "owner" : "threadly" , "repo" : "threadly" , "pullreq_id" : 55}
{ "_id" : { "$oid" : "52e961dbbd3543febe003d30"} , "url" : "https://api.github.com/repos/threadly/threadly/pulls/comments/9240651" , "id" : 9240651 , "diff_hunk" : "@@ -286,6 +286,39 @@ public static void setMaxPoolSizeFail(PriorityScheduledExecutorFactory factory)\n       factory.shutdown();\n     }\n   }\n+\n+  @Test\n+  public void setMaxPoolSizeBlockedThreadsTest() {\n+    getDefaultPriorityTest(new PriorityScheduledExecutorTestFactory());\n+  } \n+  \n+  public static void setMaxPoolSizeUnblockedThreadTest(PriorityScheduledExecutorFactory factory) {" , "path" : "src/test/java/org/threadly/concurrent/PriorityScheduledExecutorTest.java" , "position" : 49 , "original_position" : 49 , "commit_id" : "4b271259fa8ca89e57a0ec809ca07d8df43384f4" , "original_commit_id" : "4b271259fa8ca89e57a0ec809ca07d8df43384f4" , "user" : { "login" : "jentfoo" , "id" : 2165757 , "avatar_url" : "https://gravatar.com/avatar/14b0ef66ee0e52a0908ac4b5617637a0?d=https%3A%2F%2Fidenticons.github.com%2F5b9cd097595c6da5a584220f74c40003.png&r=x" , "gravatar_id" : "14b0ef66ee0e52a0908ac4b5617637a0" , "url" : "https://api.github.com/users/jentfoo" , "html_url" : "https://github.com/jentfoo" , "followers_url" : "https://api.github.com/users/jentfoo/followers" , "following_url" : "https://api.github.com/users/jentfoo/following{/other_user}" , "gists_url" : "https://api.github.com/users/jentfoo/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/jentfoo/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/jentfoo/subscriptions" , "organizations_url" : "https://api.github.com/users/jentfoo/orgs" , "repos_url" : "https://api.github.com/users/jentfoo/repos" , "events_url" : "https://api.github.com/users/jentfoo/events{/privacy}" , "received_events_url" : "https://api.github.com/users/jentfoo/received_events" , "type" : "User" , "site_admin" : false} , "body" : "Added unit tests to recreate original issue, and verify fix." , "created_at" : "2014-01-28T19:31:27Z" , "updated_at" : "2014-01-28T19:31:27Z" , "html_url" : "https://github.com/threadly/threadly/pull/55#discussion_r9240651" , "pull_request_url" : "https://api.github.com/repos/threadly/threadly/pulls/55" , "_links" : { "self" : { "href" : "https://api.github.com/repos/threadly/threadly/pulls/comments/9240651"} , "html" : { "href" : "https://github.com/threadly/threadly/pull/55#discussion_r9240651"} , "pull_request" : { "href" : "https://api.github.com/repos/threadly/threadly/pulls/55"}} , "owner" : "threadly" , "repo" : "threadly" , "pullreq_id" : 55}
{ "_id" : { "$oid" : "52e961dcbd3543fe66004b75"} , "url" : "https://api.github.com/repos/adobe/brackets-registry/pulls/comments/9282522" , "id" : 9282522 , "diff_hunk" : "@@ -0,0 +1,191 @@\n+#!/usr/bin/env node\n+/*\n+ * Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.\n+ *  \n+ * Permission is hereby granted, free of charge, to any person obtaining a\n+ * copy of this software and associated documentation files (the \"Software\"), \n+ * to deal in the Software without restriction, including without limitation \n+ * the rights to use, copy, modify, merge, publish, distribute, sublicense, \n+ * and/or sell copies of the Software, and to permit persons to whom the \n+ * Software is furnished to do so, subject to the following conditions:\n+ *  \n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *  \n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \n+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER \n+ * DEALINGS IN THE SOFTWARE.\n+ * \n+ */\n+\n+/*jslint vars: true, plusplus: true, devel: true, node: true, nomen: true,\n+indent: 4, maxerr: 50 */\n+\n+\"use strict\";\n+\n+var fs = require(\"fs\"),\n+    path = require(\"path\"),\n+    request = require(\"request-json\"),\n+    temporary = require(\"temporary\"),\n+    LogfileProcessor = require(\"./logfileProcessor\").LogfileProcessor,\n+    program = require('commander'),\n+    Promise    = require(\"bluebird\");\n+\n+program\n+  .version('0.0.1')\n+  .option('-d, --download', 'Download logfiles from S3')\n+  .option('-e, --extract', 'Extract Extension download data from downloaded logfiles')\n+  .option('-d, --downloadStats', 'Generate rolling download data')\n+  .option('-t, --tempFolder <path>', 'Path to temp folder (makes it easier to inspect logfiles)')\n+  .option('-p, --progress [true|false]', 'Print progress information')\n+  .option('-v, --verbose [true|false]', 'Increase the level of output')\n+  .parse(process.argv);\n+\n+// read the config\n+var config = JSON.parse(fs.readFileSync(path.resolve(__dirname, \"../config/config.json\")));\n+var lastProcessedTimestamp = {};\n+\n+try {\n+    lastProcessedTimestamp = JSON.parse(fs.readFileSync(path.resolve(__dirname, \"lastProcessedLogfile.json\")));\n+\n+    if (! lastProcessedTimestamp.ts) {\n+        lastProcessedTimestamp.ts = 0;\n+    }\n+} catch (Exception) {\n+    lastProcessedTimestamp.ts = 0;\n+}\n+\n+function log() {\n+    if (program.verbose) {\n+        console.log(Array.prototype.slice.apply(arguments).join(' '));\n+    }\n+}\n+\n+// Constants\n+var DOWNLOAD_STATS_FILENAME = \"downloadStats.json\",\n+    RECENT_DOWNLOAD_STATS_FILENAME = \"recentDownloadStats.json\";\n+\n+// create temp folder for logfiles\n+var tempFolder = config.tempFolder || program.tempFolder;\n+if (tempFolder) {\n+    try {\n+        fs.mkdirSync(tempFolder);\n+    } catch(e) {\n+        if (e.code !== \"EEXIST\") {\n+            // tell us what went wrong\n+            console.error(e.toString());\n+        }\n+    }\n+} else {\n+    tempFolder = new temporary.Dir().path;\n+    log(\"Using temp directory: %s\", tempFolder);\n+}\n+\n+function downloadLogFiles(progress) {\n+    var deferred = Promise.defer();\n+\n+    log(\"Downloading logfiles from S3\");\n+\n+    var logfileProcessor = new LogfileProcessor(config);\n+    var promise = logfileProcessor.downloadLogfiles(tempFolder, lastProcessedTimestamp.ts);\n+    promise.then(function (timestampLastProcessedLogfile) {\n+        fs.writeFileSync(path.resolve(__dirname, \"lastProcessedLogfile.json\"), JSON.stringify({ts: Date.parse(timestampLastProcessedLogfile)}));\n+        deferred.resolve();\n+    });\n+\n+    if (progress) {\n+        promise.progressed(function (value) {\n+            process.stdout.write(value);\n+        });\n+    }\n+\n+    return deferred.promise;\n+}\n+\n+function extractExtensionDownloadData(progress) {\n+    var deferred = Promise.defer();\n+\n+    log(\"Extract extension download data from logfiles in\", tempFolder);\n+\n+    var logfileProcessor = new LogfileProcessor(config);\n+    var promise = logfileProcessor.extractDownloadStats(tempFolder);\n+    promise.then(function (downloadStats) {\n+        fs.writeFileSync(DOWNLOAD_STATS_FILENAME, JSON.stringify(downloadStats));\n+\n+        deferred.resolve(downloadStats);\n+    });\n+\n+    if (progress) {\n+        promise.progressed(function (value) {\n+            process.stdout.write(value);\n+        });\n+    }\n+\n+    return deferred.promise;\n+}\n+\n+function generateRecentDownloadStats(progress) {\n+    var deferred = Promise.defer();\n+\n+    // create temp folder only for this operation\n+    var tempFolder = new temporary.Dir().path;\n+\n+    log(\"Generate recent extension download data from logfiles in\", tempFolder);\n+\n+    var logfileProcessor = new LogfileProcessor(config);\n+    var promise = logfileProcessor.getRecentDownloads(tempFolder);\n+\n+    promise.then(function (json) {\n+        fs.writeFileSync(RECENT_DOWNLOAD_STATS_FILENAME, JSON.stringify(json));\n+\n+        deferred.resolve(json);\n+    });\n+\n+    if (progress) {\n+        promise.progressed(function (value) {\n+            process.stdout.write(value);\n+        });\n+    }\n+\n+    return deferred.promise;\n+}\n+\n+function doItAll(progress) {\n+    downloadLogFiles(progress).then(function () {\n+        extractExtensionDownloadData(progress).then(function (downloadStats) {\n+            generateRecentDownloadStats(progress).then(function (recentDownloads) {\n+                downloadStats[\"recentDownloads\"] = recentDownloads;\n+                fs.writeFileSync(DOWNLOAD_STATS_FILENAME, JSON.stringify(downloadStats));\n+\n+                // posting works only from localhost\n+                var client = request.newClient(\"http://localhost:\" + config.port);" , "path" : "downloadStats/downloadStatsUpdater.js" , "position" : 165 , "original_position" : 165 , "commit_id" : "5c08cad4084d305531ab9227b8c2d5c9dc8b81ff" , "original_commit_id" : "5c08cad4084d305531ab9227b8c2d5c9dc8b81ff" , "user" : { "login" : "ingorichter" , "id" : 86214 , "avatar_url" : "https://gravatar.com/avatar/99581c289400be0f89188abe3c65c373?d=https%3A%2F%2Fidenticons.github.com%2Ff0e7b4062c91e5873a9ce50a4424d2d6.png&r=x" , "gravatar_id" : "99581c289400be0f89188abe3c65c373" , "url" : "https://api.github.com/users/ingorichter" , "html_url" : "https://github.com/ingorichter" , "followers_url" : "https://api.github.com/users/ingorichter/followers" , "following_url" : "https://api.github.com/users/ingorichter/following{/other_user}" , "gists_url" : "https://api.github.com/users/ingorichter/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/ingorichter/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/ingorichter/subscriptions" , "organizations_url" : "https://api.github.com/users/ingorichter/orgs" , "repos_url" : "https://api.github.com/users/ingorichter/repos" , "events_url" : "https://api.github.com/users/ingorichter/events{/privacy}" , "received_events_url" : "https://api.github.com/users/ingorichter/received_events" , "type" : "User" , "site_admin" : false} , "body" : "Yes, I've added this to the beginning of the script. I'll check if `config && config.port` is available, otherwise we use port 4000." , "created_at" : "2014-01-29T20:17:25Z" , "updated_at" : "2014-01-29T20:17:25Z" , "html_url" : "https://github.com/adobe/brackets-registry/pull/49#discussion_r9282522" , "pull_request_url" : "https://api.github.com/repos/adobe/brackets-registry/pulls/49" , "_links" : { "self" : { "href" : "https://api.github.com/repos/adobe/brackets-registry/pulls/comments/9282522"} , "html" : { "href" : "https://github.com/adobe/brackets-registry/pull/49#discussion_r9282522"} , "pull_request" : { "href" : "https://api.github.com/repos/adobe/brackets-registry/pulls/49"}} , "repo" : "brackets-registry" , "owner" : "adobe" , "pullreq_id" : 49}
{ "_id" : { "$oid" : "52e961efbd3543febe003d40"} , "url" : "https://api.github.com/repos/Sylius/Sylius/pulls/comments/9282528" , "id" : 9282528 , "diff_hunk" : "@@ -40,7 +40,29 @@ public function __construct(InventoryHandlerInterface $inventoryHandler)\n     }\n \n     /**\n-     * Get the order from event and run the inventory processor on it.\n+     * Put order inventory on hold.\n+     *\n+     * @param GenericEvent $event\n+     */\n+    public function holdInventoryUnits(GenericEvent $event)\n+    {\n+        $payment = $event->getSubject();\n+\n+        if (!$payment instanceof PaymentInterface) {\n+            throw new \\InvalidArgumentException(\n+                'Event subject to be instance of \"Sylius\\Bundle\\PaymentsBundle\\Model\\PaymentInterface\".'\n+            );\n+        }\n+\n+        if ($payment::STATE_COMPLETED !== $payment->getState()) {" , "path" : "src/Sylius/Bundle/CoreBundle/EventListener/OrderInventoryListener.php" , "position" : 19 , "original_position" : 19 , "commit_id" : "ce2565532c2021d76528f17da292aebab0f5c804" , "original_commit_id" : "ce2565532c2021d76528f17da292aebab0f5c804" , "user" : { "login" : "stloyd" , "id" : 67402 , "avatar_url" : "https://gravatar.com/avatar/b494363ed38b483b240180920c0d38c2?d=https%3A%2F%2Fidenticons.github.com%2F7152f4f2dfa4e1cc7db86648913b8ac9.png&r=x" , "gravatar_id" : "b494363ed38b483b240180920c0d38c2" , "url" : "https://api.github.com/users/stloyd" , "html_url" : "https://github.com/stloyd" , "followers_url" : "https://api.github.com/users/stloyd/followers" , "following_url" : "https://api.github.com/users/stloyd/following{/other_user}" , "gists_url" : "https://api.github.com/users/stloyd/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/stloyd/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/stloyd/subscriptions" , "organizations_url" : "https://api.github.com/users/stloyd/orgs" , "repos_url" : "https://api.github.com/users/stloyd/repos" , "events_url" : "https://api.github.com/users/stloyd/events{/privacy}" , "received_events_url" : "https://api.github.com/users/stloyd/received_events" , "type" : "User" , "site_admin" : false} , "body" : "Send event only if the payment was completed?" , "created_at" : "2014-01-29T20:17:43Z" , "updated_at" : "2014-01-29T20:17:43Z" , "html_url" : "https://github.com/Sylius/Sylius/pull/938#discussion_r9282528" , "pull_request_url" : "https://api.github.com/repos/Sylius/Sylius/pulls/938" , "_links" : { "self" : { "href" : "https://api.github.com/repos/Sylius/Sylius/pulls/comments/9282528"} , "html" : { "href" : "https://github.com/Sylius/Sylius/pull/938#discussion_r9282528"} , "pull_request" : { "href" : "https://api.github.com/repos/Sylius/Sylius/pulls/938"}} , "repo" : "Sylius" , "owner" : "Sylius" , "pullreq_id" : 938}
{ "_id" : { "$oid" : "52e961f4bd3543fe92004b1b"} , "url" : "https://api.github.com/repos/adobe/brackets-registry/pulls/comments/9282533" , "id" : 9282533 , "diff_hunk" : "@@ -0,0 +1,191 @@\n+#!/usr/bin/env node\n+/*\n+ * Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.\n+ *  \n+ * Permission is hereby granted, free of charge, to any person obtaining a\n+ * copy of this software and associated documentation files (the \"Software\"), \n+ * to deal in the Software without restriction, including without limitation \n+ * the rights to use, copy, modify, merge, publish, distribute, sublicense, \n+ * and/or sell copies of the Software, and to permit persons to whom the \n+ * Software is furnished to do so, subject to the following conditions:\n+ *  \n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *  \n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \n+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER \n+ * DEALINGS IN THE SOFTWARE.\n+ * \n+ */\n+\n+/*jslint vars: true, plusplus: true, devel: true, node: true, nomen: true,\n+indent: 4, maxerr: 50 */\n+\n+\"use strict\";\n+\n+var fs = require(\"fs\"),\n+    path = require(\"path\"),\n+    request = require(\"request-json\"),\n+    temporary = require(\"temporary\"),\n+    LogfileProcessor = require(\"./logfileProcessor\").LogfileProcessor,\n+    program = require('commander'),\n+    Promise    = require(\"bluebird\");\n+\n+program\n+  .version('0.0.1')\n+  .option('-d, --download', 'Download logfiles from S3')\n+  .option('-e, --extract', 'Extract Extension download data from downloaded logfiles')\n+  .option('-d, --downloadStats', 'Generate rolling download data')\n+  .option('-t, --tempFolder <path>', 'Path to temp folder (makes it easier to inspect logfiles)')\n+  .option('-p, --progress [true|false]', 'Print progress information')\n+  .option('-v, --verbose [true|false]', 'Increase the level of output')\n+  .parse(process.argv);\n+\n+// read the config\n+var config = JSON.parse(fs.readFileSync(path.resolve(__dirname, \"../config/config.json\")));\n+var lastProcessedTimestamp = {};\n+\n+try {\n+    lastProcessedTimestamp = JSON.parse(fs.readFileSync(path.resolve(__dirname, \"lastProcessedLogfile.json\")));\n+\n+    if (! lastProcessedTimestamp.ts) {\n+        lastProcessedTimestamp.ts = 0;\n+    }\n+} catch (Exception) {\n+    lastProcessedTimestamp.ts = 0;\n+}\n+\n+function log() {\n+    if (program.verbose) {\n+        console.log(Array.prototype.slice.apply(arguments).join(' '));\n+    }\n+}\n+\n+// Constants\n+var DOWNLOAD_STATS_FILENAME = \"downloadStats.json\",\n+    RECENT_DOWNLOAD_STATS_FILENAME = \"recentDownloadStats.json\";\n+\n+// create temp folder for logfiles\n+var tempFolder = config.tempFolder || program.tempFolder;\n+if (tempFolder) {\n+    try {\n+        fs.mkdirSync(tempFolder);\n+    } catch(e) {\n+        if (e.code !== \"EEXIST\") {\n+            // tell us what went wrong\n+            console.error(e.toString());\n+        }\n+    }\n+} else {\n+    tempFolder = new temporary.Dir().path;\n+    log(\"Using temp directory: %s\", tempFolder);\n+}\n+\n+function downloadLogFiles(progress) {\n+    var deferred = Promise.defer();\n+\n+    log(\"Downloading logfiles from S3\");\n+\n+    var logfileProcessor = new LogfileProcessor(config);\n+    var promise = logfileProcessor.downloadLogfiles(tempFolder, lastProcessedTimestamp.ts);\n+    promise.then(function (timestampLastProcessedLogfile) {\n+        fs.writeFileSync(path.resolve(__dirname, \"lastProcessedLogfile.json\"), JSON.stringify({ts: Date.parse(timestampLastProcessedLogfile)}));\n+        deferred.resolve();\n+    });\n+\n+    if (progress) {\n+        promise.progressed(function (value) {\n+            process.stdout.write(value);\n+        });\n+    }\n+\n+    return deferred.promise;\n+}\n+\n+function extractExtensionDownloadData(progress) {\n+    var deferred = Promise.defer();\n+\n+    log(\"Extract extension download data from logfiles in\", tempFolder);\n+\n+    var logfileProcessor = new LogfileProcessor(config);\n+    var promise = logfileProcessor.extractDownloadStats(tempFolder);\n+    promise.then(function (downloadStats) {\n+        fs.writeFileSync(DOWNLOAD_STATS_FILENAME, JSON.stringify(downloadStats));\n+\n+        deferred.resolve(downloadStats);\n+    });\n+\n+    if (progress) {\n+        promise.progressed(function (value) {\n+            process.stdout.write(value);\n+        });\n+    }\n+\n+    return deferred.promise;\n+}\n+\n+function generateRecentDownloadStats(progress) {\n+    var deferred = Promise.defer();\n+\n+    // create temp folder only for this operation\n+    var tempFolder = new temporary.Dir().path;\n+\n+    log(\"Generate recent extension download data from logfiles in\", tempFolder);\n+\n+    var logfileProcessor = new LogfileProcessor(config);\n+    var promise = logfileProcessor.getRecentDownloads(tempFolder);\n+\n+    promise.then(function (json) {\n+        fs.writeFileSync(RECENT_DOWNLOAD_STATS_FILENAME, JSON.stringify(json));\n+\n+        deferred.resolve(json);\n+    });\n+\n+    if (progress) {\n+        promise.progressed(function (value) {\n+            process.stdout.write(value);\n+        });\n+    }\n+\n+    return deferred.promise;\n+}\n+\n+function doItAll(progress) {\n+    downloadLogFiles(progress).then(function () {\n+        extractExtensionDownloadData(progress).then(function (downloadStats) {\n+            generateRecentDownloadStats(progress).then(function (recentDownloads) {\n+                downloadStats[\"recentDownloads\"] = recentDownloads;\n+                fs.writeFileSync(DOWNLOAD_STATS_FILENAME, JSON.stringify(downloadStats));\n+\n+                // posting works only from localhost\n+                var client = request.newClient(\"http://localhost:\" + config.port);\n+                client.sendFile(\"/stats\", path.resolve(__dirname, DOWNLOAD_STATS_FILENAME), null, function (err, res, body) {\n+                    if (err) {\n+                        console.error(err);\n+                    } else {\n+                        log(\"File uploaded\");\n+                    }\n+                });\n+\n+                if (!config['debug.keepTempFolder']) {" , "path" : "downloadStats/downloadStatsUpdater.js" , "position" : 174 , "original_position" : 174 , "commit_id" : "5c08cad4084d305531ab9227b8c2d5c9dc8b81ff" , "original_commit_id" : "5c08cad4084d305531ab9227b8c2d5c9dc8b81ff" , "user" : { "login" : "ingorichter" , "id" : 86214 , "avatar_url" : "https://gravatar.com/avatar/99581c289400be0f89188abe3c65c373?d=https%3A%2F%2Fidenticons.github.com%2Ff0e7b4062c91e5873a9ce50a4424d2d6.png&r=x" , "gravatar_id" : "99581c289400be0f89188abe3c65c373" , "url" : "https://api.github.com/users/ingorichter" , "html_url" : "https://github.com/ingorichter" , "followers_url" : "https://api.github.com/users/ingorichter/followers" , "following_url" : "https://api.github.com/users/ingorichter/following{/other_user}" , "gists_url" : "https://api.github.com/users/ingorichter/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/ingorichter/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/ingorichter/subscriptions" , "organizations_url" : "https://api.github.com/users/ingorichter/orgs" , "repos_url" : "https://api.github.com/users/ingorichter/repos" , "events_url" : "https://api.github.com/users/ingorichter/events{/privacy}" , "received_events_url" : "https://api.github.com/users/ingorichter/received_events" , "type" : "User" , "site_admin" : false} , "body" : "Done!" , "created_at" : "2014-01-29T20:17:53Z" , "updated_at" : "2014-01-29T20:17:53Z" , "html_url" : "https://github.com/adobe/brackets-registry/pull/49#discussion_r9282533" , "pull_request_url" : "https://api.github.com/repos/adobe/brackets-registry/pulls/49" , "_links" : { "self" : { "href" : "https://api.github.com/repos/adobe/brackets-registry/pulls/comments/9282533"} , "html" : { "href" : "https://github.com/adobe/brackets-registry/pull/49#discussion_r9282533"} , "pull_request" : { "href" : "https://api.github.com/repos/adobe/brackets-registry/pulls/49"}} , "repo" : "brackets-registry" , "owner" : "adobe" , "pullreq_id" : 49}
{ "_id" : { "$oid" : "52e961fabd3543fe72003a6e"} , "url" : "https://api.github.com/repos/ga-wdi-boston/wdi_4_rails_hw_activerecord_bookmarks/pulls/comments/9282535" , "id" : 9282535 , "diff_hunk" : "@@ -0,0 +1,4 @@\n+class Bookmark < ActiveRecord::Base\n+  validates_presence_of :title, :url\n+  validates :url, format: { with: /\\Ahttp:\\/\\//, message: \"requires http:// at the beginning\"}" , "path" : "app/models/bookmark.rb" , "position" : 3 , "original_position" : 3 , "commit_id" : "31de4ad1036de25d624888e1c31c0a1a348f5ccf" , "original_commit_id" : "31de4ad1036de25d624888e1c31c0a1a348f5ccf" , "user" : { "login" : "grantovich" , "id" : 394835 , "avatar_url" : "https://gravatar.com/avatar/b6c92201404bd9b616fbba5e783cb3d8?d=https%3A%2F%2Fidenticons.github.com%2F50bf48b85ed71ba0f25be359e2495785.png&r=x" , "gravatar_id" : "b6c92201404bd9b616fbba5e783cb3d8" , "url" : "https://api.github.com/users/grantovich" , "html_url" : "https://github.com/grantovich" , "followers_url" : "https://api.github.com/users/grantovich/followers" , "following_url" : "https://api.github.com/users/grantovich/following{/other_user}" , "gists_url" : "https://api.github.com/users/grantovich/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/grantovich/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/grantovich/subscriptions" , "organizations_url" : "https://api.github.com/users/grantovich/orgs" , "repos_url" : "https://api.github.com/users/grantovich/repos" , "events_url" : "https://api.github.com/users/grantovich/events{/privacy}" , "received_events_url" : "https://api.github.com/users/grantovich/received_events" , "type" : "User" , "site_admin" : false} , "body" : "This could also be `validates_format_of :url, with: ...` (this is a personal preference, though the version you've used is often cleaner if you're applying multiple validators to the same attribute)" , "created_at" : "2014-01-29T20:17:58Z" , "updated_at" : "2014-01-29T20:17:58Z" , "html_url" : "https://github.com/ga-wdi-boston/wdi_4_rails_hw_activerecord_bookmarks/pull/2#discussion_r9282535" , "pull_request_url" : "https://api.github.com/repos/ga-wdi-boston/wdi_4_rails_hw_activerecord_bookmarks/pulls/2" , "_links" : { "self" : { "href" : "https://api.github.com/repos/ga-wdi-boston/wdi_4_rails_hw_activerecord_bookmarks/pulls/comments/9282535"} , "html" : { "href" : "https://github.com/ga-wdi-boston/wdi_4_rails_hw_activerecord_bookmarks/pull/2#discussion_r9282535"} , "pull_request" : { "href" : "https://api.github.com/repos/ga-wdi-boston/wdi_4_rails_hw_activerecord_bookmarks/pulls/2"}} , "repo" : "wdi_4_rails_hw_activerecord_bookmarks" , "owner" : "ga-wdi-boston" , "pullreq_id" : 2}
{ "_id" : { "$oid" : "52e961ffbd3543fe66004b90"} , "url" : "https://api.github.com/repos/p4r4digm/todo-helper/pulls/comments/9282543" , "id" : 9282543 , "diff_hunk" : "@@ -0,0 +1,119 @@\n+import os\n+import sys\n+import time\n+import signal\n+import multiprocessing\n+from datetime import datetime\n+\n+PROJECT_PATH = os.path.abspath(os.path.dirname(__file__))\n+sys.path.append(os.path.join(PROJECT_PATH, '..', '..'))\n+\n+from pygithub3 import Github\n+\n+import src.todoMelvin\n+from src.todoMelvin import settings, createGithubObject\n+from src.todoLogging import WarningLevels, log\n+from src.db.todoRepos import RepoQueues, Repo\n+from src.workers.workerStatus import WorkerStatus\n+\n+redis = src.db.todoRedis.connect()\n+gh = createGithubObject()\n+\n+def runWorker(status):\n+    #This causes this thread to ignore interrupt signals so theya re only handled by parent\n+    signal.signal(signal.SIGINT, signal.SIG_IGN)\n+\n+    #Loop will be closed externally\n+    while status.value != WorkerStatus.Dead:\n+        try:\n+            postCount = redis.llen(RepoQueues.Posting)\n+        except:\n+            log(WarningLevels.Fatal, \"Posting Worker unable to reach Redis\")\n+            break  \n+            \n+        if postCount > 0:\n+            repoKey = redis.lpop(RepoQueues.Posting)\n+            \n+            repo = Repo()\n+            repo.loadFromKey(repoKey)\n+\n+            #sanity check our loaded key" , "path" : "src/workers/poster.py" , "position" : 40 , "original_position" : 40 , "commit_id" : "53823b2805afcf96c45d8966aa7efcebdfdcfc26" , "original_commit_id" : "53823b2805afcf96c45d8966aa7efcebdfdcfc26" , "user" : { "login" : "pconerly" , "id" : 469808 , "avatar_url" : "https://gravatar.com/avatar/f4f17b3c5e418876ea44f5eb423941be?d=https%3A%2F%2Fidenticons.github.com%2Ff1f9ebd6417652bc86b1eb2501e762bd.png&r=x" , "gravatar_id" : "f4f17b3c5e418876ea44f5eb423941be" , "url" : "https://api.github.com/users/pconerly" , "html_url" : "https://github.com/pconerly" , "followers_url" : "https://api.github.com/users/pconerly/followers" , "following_url" : "https://api.github.com/users/pconerly/following{/other_user}" , "gists_url" : "https://api.github.com/users/pconerly/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/pconerly/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/pconerly/subscriptions" , "organizations_url" : "https://api.github.com/users/pconerly/orgs" , "repos_url" : "https://api.github.com/users/pconerly/repos" , "events_url" : "https://api.github.com/users/pconerly/events{/privacy}" , "received_events_url" : "https://api.github.com/users/pconerly/received_events" , "type" : "User" , "site_admin" : false} , "body" : "do we actually need a sanity check or were there problems at some point?" , "created_at" : "2014-01-29T20:18:03Z" , "updated_at" : "2014-01-29T20:18:03Z" , "html_url" : "https://github.com/p4r4digm/todo-helper/pull/216#discussion_r9282543" , "pull_request_url" : "https://api.github.com/repos/p4r4digm/todo-helper/pulls/216" , "_links" : { "self" : { "href" : "https://api.github.com/repos/p4r4digm/todo-helper/pulls/comments/9282543"} , "html" : { "href" : "https://github.com/p4r4digm/todo-helper/pull/216#discussion_r9282543"} , "pull_request" : { "href" : "https://api.github.com/repos/p4r4digm/todo-helper/pulls/216"}} , "repo" : "todo-helper" , "owner" : "p4r4digm" , "pullreq_id" : 216}
{ "_id" : { "$oid" : "52e961ffbd3543fea3003a1b"} , "url" : "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/9282544" , "id" : 9282544 , "diff_hunk" : "@@ -58,7 +58,7 @@ module Puppet\n         begin\n           uri = URI.parse(URI.escape(source))\n         rescue => detail\n-          self.fail \"Could not understand source #{source}: #{detail}\"\n+          self.fail Puppet::Error, \"Could not understand source #{source}: #{detail}\", detail.backtrace" , "path" : "lib/puppet/type/file/source.rb" , "position" : 5 , "original_position" : 5 , "commit_id" : "9fa4a39a684cba8ccb0902060a2557357c05f39e" , "original_commit_id" : "9fa4a39a684cba8ccb0902060a2557357c05f39e" , "user" : { "login" : "peterhuene" , "id" : 509666 , "avatar_url" : "https://gravatar.com/avatar/31a910d347dac0a0b6a433e192cf3aab?d=https%3A%2F%2Fidenticons.github.com%2F3a98cc2a9ab230d09033ef5d7302029d.png&r=x" , "gravatar_id" : "31a910d347dac0a0b6a433e192cf3aab" , "url" : "https://api.github.com/users/peterhuene" , "html_url" : "https://github.com/peterhuene" , "followers_url" : "https://api.github.com/users/peterhuene/followers" , "following_url" : "https://api.github.com/users/peterhuene/following{/other_user}" , "gists_url" : "https://api.github.com/users/peterhuene/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/peterhuene/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/peterhuene/subscriptions" , "organizations_url" : "https://api.github.com/users/peterhuene/orgs" , "repos_url" : "https://api.github.com/users/peterhuene/repos" , "events_url" : "https://api.github.com/users/peterhuene/events{/privacy}" , "received_events_url" : "https://api.github.com/users/peterhuene/received_events" , "type" : "User" , "site_admin" : false} , "body" : "Passing backtrace.  Will fix." , "created_at" : "2014-01-29T20:18:04Z" , "updated_at" : "2014-01-29T20:18:04Z" , "html_url" : "https://github.com/puppetlabs/puppet/pull/2293#discussion_r9282544" , "pull_request_url" : "https://api.github.com/repos/puppetlabs/puppet/pulls/2293" , "_links" : { "self" : { "href" : "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/9282544"} , "html" : { "href" : "https://github.com/puppetlabs/puppet/pull/2293#discussion_r9282544"} , "pull_request" : { "href" : "https://api.github.com/repos/puppetlabs/puppet/pulls/2293"}} , "repo" : "puppet" , "owner" : "puppetlabs" , "pullreq_id" : 2293}
{ "_id" : { "$oid" : "52e96206bd3543020f003cac"} , "url" : "https://api.github.com/repos/wildfly/wildfly/pulls/comments/9282547" , "id" : 9282547 , "diff_hunk" : "@@ -98,12 +98,12 @@ public void start(StartContext context) {\n \n     @Override\n     public void stop(StopContext context) {\n+        this.service.getValue().unregisterListener(this);" , "path" : "mod_cluster/undertow/src/main/java/org/wildfly/mod_cluster/undertow/UndertowEventHandlerAdapter.java" , "position" : 4 , "original_position" : 4 , "commit_id" : "90af49e43ef325f18cbb49a626e5436ffbbc66a0" , "original_commit_id" : "3b29956a87a2e16d754a9993d8f0c881c07f54a0" , "user" : { "login" : "rhusar" , "id" : 765506 , "avatar_url" : "https://gravatar.com/avatar/b553ef9a63f33f7c9c4deba362fff563?d=https%3A%2F%2Fidenticons.github.com%2Fe6f8c52f67a1bb05463c74f622239ce9.png&r=x" , "gravatar_id" : "b553ef9a63f33f7c9c4deba362fff563" , "url" : "https://api.github.com/users/rhusar" , "html_url" : "https://github.com/rhusar" , "followers_url" : "https://api.github.com/users/rhusar/followers" , "following_url" : "https://api.github.com/users/rhusar/following{/other_user}" , "gists_url" : "https://api.github.com/users/rhusar/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/rhusar/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/rhusar/subscriptions" , "organizations_url" : "https://api.github.com/users/rhusar/orgs" , "repos_url" : "https://api.github.com/users/rhusar/repos" , "events_url" : "https://api.github.com/users/rhusar/events{/privacy}" , "received_events_url" : "https://api.github.com/users/rhusar/received_events" , "type" : "User" , "site_admin" : false} , "body" : "@bstansberry Good point, if I am tracing right UndertowDeploymentService.stop(..) (MSC) calls stopContext(..) which calls unregisterDeployment(..) which fires onDeploymentStop(..) which performs I/O." , "created_at" : "2014-01-29T20:18:07Z" , "updated_at" : "2014-01-29T20:18:07Z" , "html_url" : "https://github.com/wildfly/wildfly/pull/5819#discussion_r9282547" , "pull_request_url" : "https://api.github.com/repos/wildfly/wildfly/pulls/5819" , "_links" : { "self" : { "href" : "https://api.github.com/repos/wildfly/wildfly/pulls/comments/9282547"} , "html" : { "href" : "https://github.com/wildfly/wildfly/pull/5819#discussion_r9282547"} , "pull_request" : { "href" : "https://api.github.com/repos/wildfly/wildfly/pulls/5819"}} , "repo" : "wildfly" , "owner" : "wildfly" , "pullreq_id" : 5819}
{ "_id" : { "$oid" : "52e96219bd3543020f003cb6"} , "url" : "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/9282572" , "id" : 9282572 , "diff_hunk" : "@@ -175,7 +175,7 @@ def metadata\n             break\n           end\n         rescue => detail\n-          fail detail, \"Could not retrieve file metadata for #{source}: #{detail}\"\n+          fail detail, \"Could not retrieve file metadata for #{source}: #{detail}\", detail.backtrace" , "path" : "lib/puppet/type/file/source.rb" , "position" : 14 , "original_position" : 14 , "commit_id" : "9fa4a39a684cba8ccb0902060a2557357c05f39e" , "original_commit_id" : "9fa4a39a684cba8ccb0902060a2557357c05f39e" , "user" : { "login" : "peterhuene" , "id" : 509666 , "avatar_url" : "https://gravatar.com/avatar/31a910d347dac0a0b6a433e192cf3aab?d=https%3A%2F%2Fidenticons.github.com%2F3a98cc2a9ab230d09033ef5d7302029d.png&r=x" , "gravatar_id" : "31a910d347dac0a0b6a433e192cf3aab" , "url" : "https://api.github.com/users/peterhuene" , "html_url" : "https://github.com/peterhuene" , "followers_url" : "https://api.github.com/users/peterhuene/followers" , "following_url" : "https://api.github.com/users/peterhuene/following{/other_user}" , "gists_url" : "https://api.github.com/users/peterhuene/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/peterhuene/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/peterhuene/subscriptions" , "organizations_url" : "https://api.github.com/users/peterhuene/orgs" , "repos_url" : "https://api.github.com/users/peterhuene/repos" , "events_url" : "https://api.github.com/users/peterhuene/events{/privacy}" , "received_events_url" : "https://api.github.com/users/peterhuene/received_events" , "type" : "User" , "site_admin" : false} , "body" : "Yep, will fix." , "created_at" : "2014-01-29T20:18:31Z" , "updated_at" : "2014-01-29T20:18:31Z" , "html_url" : "https://github.com/puppetlabs/puppet/pull/2293#discussion_r9282572" , "pull_request_url" : "https://api.github.com/repos/puppetlabs/puppet/pulls/2293" , "_links" : { "self" : { "href" : "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/9282572"} , "html" : { "href" : "https://github.com/puppetlabs/puppet/pull/2293#discussion_r9282572"} , "pull_request" : { "href" : "https://api.github.com/repos/puppetlabs/puppet/pulls/2293"}} , "repo" : "puppet" , "owner" : "puppetlabs" , "pullreq_id" : 2293}
{ "_id" : { "$oid" : "52e96219bd3543fe92004b31"} , "url" : "https://api.github.com/repos/KSHSK/WAVED/pulls/comments/9282570" , "id" : 9282570 , "diff_hunk" : "@@ -0,0 +1,76 @@\n+<?php\n+include_once(\"CommonMethods.php\");\n+\n+/**\n+ * Checks to see if the project name is valid.\n+ * @param string $projectName\n+ * @param array $returnValue\n+ * @return boolean\n+ */\n+function validProjectName($projectName, &$returnValue) {\n+    if ($projectName === null) {\n+        setReturnValueError($returnValue, \"The project name is required.\");\n+        return false;\n+    }\n+    \n+    $len = strlen($projectName);\n+    if ($len < 1 || $len > 50) {\n+        setReturnValueError($returnValue, \"The project name must be between 1 and 255 characters.\");\n+        return false;\n+    }\n+    \n+    $pattern = \"/^[a-zA-Z0-9_\\- ]+$/\";\n+    if (preg_match($pattern, $projectName) !== 1) {\n+        setReturnValueError($returnValue, \"The project name can only include alphanumeric characters, hyphens (-), and underscores (_).\");\n+        return false;\n+    }\n+    \n+    return true;\n+}\n+\n+\n+/* Main Code. */\n+\n+// Setup return object.\n+$returnValue = getInitialReturnValue();\n+\n+$projectName = $_POST[\"project\"];\n+\n+// Make sure the project name is valid.\n+if (!validProjectName($projectName, $returnValue)) {\n+    reportReturnValue($returnValue);\n+    return;\n+}\n+\n+// Go back to the main directory.\n+chdir(\"../\");" , "path" : "PHP/createProject.php" , "position" : 46 , "original_position" : 46 , "commit_id" : "4c18c4ad02c4b2a9d5acf35bf75cfc4c4aa1dfa0" , "original_commit_id" : "4c18c4ad02c4b2a9d5acf35bf75cfc4c4aa1dfa0" , "user" : { "login" : "seanblue" , "id" : 5884067 , "avatar_url" : "https://gravatar.com/avatar/56a2fb3bf7fa47d27a2470273280aacf?d=https%3A%2F%2Fidenticons.github.com%2Fcbc6bf7aea85ec6aa7ffd821b4698ce2.png&r=x" , "gravatar_id" : "56a2fb3bf7fa47d27a2470273280aacf" , "url" : "https://api.github.com/users/seanblue" , "html_url" : "https://github.com/seanblue" , "followers_url" : "https://api.github.com/users/seanblue/followers" , "following_url" : "https://api.github.com/users/seanblue/following{/other_user}" , "gists_url" : "https://api.github.com/users/seanblue/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/seanblue/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/seanblue/subscriptions" , "organizations_url" : "https://api.github.com/users/seanblue/orgs" , "repos_url" : "https://api.github.com/users/seanblue/repos" , "events_url" : "https://api.github.com/users/seanblue/events{/privacy}" , "received_events_url" : "https://api.github.com/users/seanblue/received_events" , "type" : "User" , "site_admin" : false} , "body" : "We should decide if we want to do this every time or never. We need to be consistent or errors could occur when using common functions." , "created_at" : "2014-01-29T20:18:30Z" , "updated_at" : "2014-01-29T20:18:30Z" , "html_url" : "https://github.com/KSHSK/WAVED/pull/50#discussion_r9282570" , "pull_request_url" : "https://api.github.com/repos/KSHSK/WAVED/pulls/50" , "_links" : { "self" : { "href" : "https://api.github.com/repos/KSHSK/WAVED/pulls/comments/9282570"} , "html" : { "href" : "https://github.com/KSHSK/WAVED/pull/50#discussion_r9282570"} , "pull_request" : { "href" : "https://api.github.com/repos/KSHSK/WAVED/pulls/50"}} , "repo" : "WAVED" , "owner" : "KSHSK" , "pullreq_id" : 50}
{ "_id" : { "$oid" : "52e9621dbd354301f0004c82"} , "url" : "https://api.github.com/repos/mozilla-b2g/gaia/pulls/comments/9282575" , "id" : 9282575 , "diff_hunk" : "@@ -0,0 +1,134 @@\n+var Clock = require('./clock');\n+var Actions = require('marionette-client').Actions;\n+var MAXFLICK = 1200;\n+\n+function Timer(client) {\n+  Clock.apply(this, arguments);\n+  this._actions = new Actions(client);\n+}\n+\n+module.exports = Timer;\n+\n+Timer.prototype = Object.create(Clock.prototype);\n+\n+Timer.prototype.launch = function() {\n+  Clock.prototype.launch.call(this);\n+  this.navigate('timer');\n+};\n+\n+Timer.prototype.getDuration = function() {\n+  return [\n+    getSpinnerValue.call(this, 'hour') * 60 * 1000 * 1000,\n+    getSpinnerValue.call(this, 'minute') * 1000 * 1000\n+  ].reduce(function(prev, current) {\n+    return prev + current;\n+  }, 0);\n+};\n+\n+Timer.prototype.setDuration = function(hours, minutes, seconds) {\n+  setSpinnerValue.call(this, 'hour', hours);\n+  setSpinnerValue.call(this, 'minute', minutes);\n+};\n+\n+Timer.prototype.readCountdown = function() {\n+  return this.el.timer.countdown.text();\n+};\n+\n+Timer.prototype.start = function() {\n+  var createBtn = this.el.timer.createBtn;\n+  var countdown = this.el.timer.countdown;\n+\n+  this.client.waitFor(function() {\n+    createBtn.tap();\n+    return countdown.displayed() && /[1-9]/.test(countdown.text());\n+  });\n+};\n+\n+Timer.prototype.pause = function() {\n+  this.el.timer.pauseBtn.tap();\n+};\n+\n+Timer.prototype.resume = function() {\n+  this.el.timer.resumeBtn.tap();\n+};\n+\n+Timer.prototype.cancel = function() {\n+  this.el.timer.cancelBtn.tap();\n+};\n+\n+function getCenterEl(name) {\n+  var containerEl = this.el.timer.spinner[name];\n+  var valEls = this.els.timer.spinner[name + 's'];\n+  var size = containerEl.size();\n+  var location = containerEl.location();\n+  var center = location.y + 0.5 * size.height;\n+  var closestOffset = Infinity;\n+  var closest;\n+\n+  valEls.forEach(function(valEl) {\n+    var valCenter = valEl.location().y + 0.5 * valEl.size().height;\n+    var dist = Math.abs(valCenter - center);\n+    if (dist < closestOffset) {\n+      closest = valEl;\n+      closestOffset = dist;\n+    }\n+  });\n+\n+  return closest;\n+}\n+\n+function getSpinnerValue(name) {\n+  return parseInt(getCenterEl.call(this, name).text(), 10);\n+}\n+\n+function setSpinnerValue(name, val) {\n+  var flickAmt = MAXFLICK;\n+  var dir = -1;\n+  var current = -Infinity;\n+  var centerEl, size, prev, center;\n+\n+  if (getSpinnerValue.call(this, name) === val) {\n+    return;\n+  }\n+\n+  do {\n+    target = getCenterEl.call(this, name);\n+    size = target.size();\n+    center = {\n+      x: size.width / 2,\n+      y: size.height / 2\n+    };\n+\n+    this._actions\n+      .flick(target, center.x, center.y, center.x, center.y + dir * flickAmt)\n+      .perform();\n+\n+    waitForSpinStop.call(this, target);\n+\n+    prev = current;\n+    current = getSpinnerValue.call(this, name);\n+\n+    // If the most recent flick has passed over the target value, reverse\n+    // direction and decrease the flick strength.\n+    if ([prev, val, current].sort(compareNumbers)[1] === val) {\n+      flickAmt /= 1.5;\n+      dir *= -1;\n+    }\n+  } while (current !== val);\n+}\n+\n+// Wait until the spinner's inertial motion has dissipated before continuing.\n+function waitForSpinStop(target) {" , "path" : "apps/clock/test/marionette/lib/timer.js" , "position" : 121 , "original_position" : 121 , "commit_id" : "23fb79258862ab303dfafad0bbaf7f962e28c677" , "original_commit_id" : "23fb79258862ab303dfafad0bbaf7f962e28c677" , "user" : { "login" : "gaye" , "id" : 535859 , "avatar_url" : "https://gravatar.com/avatar/e781ab5c4935bc74643c593608505556?d=https%3A%2F%2Fidenticons.github.com%2F1033eb54923520c4658b4e82513043b5.png&r=x" , "gravatar_id" : "e781ab5c4935bc74643c593608505556" , "url" : "https://api.github.com/users/gaye" , "html_url" : "https://github.com/gaye" , "followers_url" : "https://api.github.com/users/gaye/followers" , "following_url" : "https://api.github.com/users/gaye/following{/other_user}" , "gists_url" : "https://api.github.com/users/gaye/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/gaye/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/gaye/subscriptions" , "organizations_url" : "https://api.github.com/users/gaye/orgs" , "repos_url" : "https://api.github.com/users/gaye/repos" , "events_url" : "https://api.github.com/users/gaye/events{/privacy}" , "received_events_url" : "https://api.github.com/users/gaye/received_events" , "type" : "User" , "site_admin" : false} , "body" : "Okay fair enough... I know @lightsofapollo is fond of this :)" , "created_at" : "2014-01-29T20:18:35Z" , "updated_at" : "2014-01-29T20:18:35Z" , "html_url" : "https://github.com/mozilla-b2g/gaia/pull/15613#discussion_r9282575" , "pull_request_url" : "https://api.github.com/repos/mozilla-b2g/gaia/pulls/15613" , "_links" : { "self" : { "href" : "https://api.github.com/repos/mozilla-b2g/gaia/pulls/comments/9282575"} , "html" : { "href" : "https://github.com/mozilla-b2g/gaia/pull/15613#discussion_r9282575"} , "pull_request" : { "href" : "https://api.github.com/repos/mozilla-b2g/gaia/pulls/15613"}} , "repo" : "gaia" , "owner" : "mozilla-b2g" , "pullreq_id" : 15613}
{ "_id" : { "$oid" : "52e9621dbd3543fed6004c7a"} , "url" : "https://api.github.com/repos/Neamar/corporate/pulls/comments/9282569" , "id" : 9282569 , "diff_hunk" : "@@ -1,27 +1,64 @@\n+import codecs\n+import markdown\n+\n+from os import  listdir\n from django.db import models\n+from django.conf import settings\n+from django.utils.functional import lazy_property\n \n from engine.models import Game\n \n+# To be changed (architecture decision): where to put the .md files\n+BASE_CORPO_DIR = \"{0}/engine_modules/corporation/base_corporation\".format(settings.BASE_DIR)\n \n-class BaseCorporation(models.Model):\n+class BaseCorporation():\n \t\"\"\"\n \tBasic corporation definition, reused for each game\n+\tImplemented as a separate non-model class to avoid cluttering the database\n \t\"\"\"\n-\tname = models.CharField(max_length=50, unique=True)\n-\tdescription = models.TextField()\n-\tinitials_assets = models.PositiveSmallIntegerField(default=10)\n \n+\tdef __init__(self, slug):\n+\n+\t\tpath = \"{0}/{1}.md\".format(BASE_CORPO_DIR, slug)" , "path" : "engine_modules/corporation/models.py" , "position" : 26 , "original_position" : 26 , "commit_id" : "c13302670e0a2da049de360203333c12e4745a79" , "original_commit_id" : "d7fc2b0ec513c24a6410d6f3a34556841f99f737" , "user" : { "login" : "Neamar" , "id" : 536844 , "avatar_url" : "https://gravatar.com/avatar/1bd44880100d5a4ce780441e4b54ddfe?d=https%3A%2F%2Fidenticons.github.com%2F14de7a24a4dd6804686069667dde27f5.png&r=x" , "gravatar_id" : "1bd44880100d5a4ce780441e4b54ddfe" , "url" : "https://api.github.com/users/Neamar" , "html_url" : "https://github.com/Neamar" , "followers_url" : "https://api.github.com/users/Neamar/followers" , "following_url" : "https://api.github.com/users/Neamar/following{/other_user}" , "gists_url" : "https://api.github.com/users/Neamar/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/Neamar/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/Neamar/subscriptions" , "organizations_url" : "https://api.github.com/users/Neamar/orgs" , "repos_url" : "https://api.github.com/users/Neamar/repos" , "events_url" : "https://api.github.com/users/Neamar/events{/privacy}" , "received_events_url" : "https://api.github.com/users/Neamar/received_events" , "type" : "User" , "site_admin" : false} , "body" : ">>> a = \"%s lol\"\r\n>>> a % \"5\"" , "created_at" : "2014-01-29T20:18:30Z" , "updated_at" : "2014-01-29T20:18:30Z" , "html_url" : "https://github.com/Neamar/corporate/pull/23#discussion_r9282569" , "pull_request_url" : "https://api.github.com/repos/Neamar/corporate/pulls/23" , "_links" : { "self" : { "href" : "https://api.github.com/repos/Neamar/corporate/pulls/comments/9282569"} , "html" : { "href" : "https://github.com/Neamar/corporate/pull/23#discussion_r9282569"} , "pull_request" : { "href" : "https://api.github.com/repos/Neamar/corporate/pulls/23"}} , "repo" : "corporate" , "owner" : "Neamar" , "pullreq_id" : 23}
{ "_id" : { "$oid" : "52e9623bbd35430297004d7b"} , "url" : "https://api.github.com/repos/DanBurton/numbers/pulls/comments/9282597" , "id" : 9282597 , "diff_hunk" : "@@ -1,15 +1,22 @@\n -- | An incomplete implementation of interval aritrhmetic.\n-module Data.Number.Interval(Interval, ival, getIval) where\n+module Data.Number.Interval(Interval, ival, ival', ispan, getIval) where\n \n-data Interval a = I a a\n+data Interval a = I !a !a" , "path" : "Data/Number/Interval.hs" , "position" : 6 , "original_position" : 6 , "commit_id" : "fc256980c404e2611b05ad9d40916883594102e6" , "original_commit_id" : "fc256980c404e2611b05ad9d40916883594102e6" , "user" : { "login" : "DanBurton" , "id" : 713692 , "avatar_url" : "https://gravatar.com/avatar/8d59503078761ba50620cbee4348882e?d=https%3A%2F%2Fidenticons.github.com%2Ffb95a70e644b586317d6f52041a96bc6.png&r=x" , "gravatar_id" : "8d59503078761ba50620cbee4348882e" , "url" : "https://api.github.com/users/DanBurton" , "html_url" : "https://github.com/DanBurton" , "followers_url" : "https://api.github.com/users/DanBurton/followers" , "following_url" : "https://api.github.com/users/DanBurton/following{/other_user}" , "gists_url" : "https://api.github.com/users/DanBurton/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/DanBurton/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/DanBurton/subscriptions" , "organizations_url" : "https://api.github.com/users/DanBurton/orgs" , "repos_url" : "https://api.github.com/users/DanBurton/repos" , "events_url" : "https://api.github.com/users/DanBurton/events{/privacy}" , "received_events_url" : "https://api.github.com/users/DanBurton/received_events" , "type" : "User" , "site_admin" : false} , "body" : "I'm not sure this strictness is justified. Theoretically there might be lazy numeric types that we might want to use this with. And anyways, if the user is invoking `ival` or `ival'` to construct an `Interval`, then the code will perform `<=`, which in most cases will force the numbers at that point so they can be compared." , "created_at" : "2014-01-29T20:19:03Z" , "updated_at" : "2014-01-29T20:19:03Z" , "html_url" : "https://github.com/DanBurton/numbers/pull/10#discussion_r9282597" , "pull_request_url" : "https://api.github.com/repos/DanBurton/numbers/pulls/10" , "_links" : { "self" : { "href" : "https://api.github.com/repos/DanBurton/numbers/pulls/comments/9282597"} , "html" : { "href" : "https://github.com/DanBurton/numbers/pull/10#discussion_r9282597"} , "pull_request" : { "href" : "https://api.github.com/repos/DanBurton/numbers/pulls/10"}} , "repo" : "numbers" , "owner" : "DanBurton" , "pullreq_id" : 10}
{ "_id" : { "$oid" : "52e96249bd35430297004d82"} , "url" : "https://api.github.com/repos/theforeman/theforeman.org/pulls/comments/9282606" , "id" : 9282606 , "diff_hunk" : "@@ -168,7 +299,22 @@ See also: foreman_url\n If Foreman receives an environment fact from one of its hosts and if this option is _true_, it will update the host's environment with the new value. By default this is not the case as Foreman should manage the host's environment.\n Default: false\n \n+##### update_ip_from_built_request\n+\n+If _true_, Foreman will update the host IP with the IP that made the 'build' request." , "path" : "_includes/manuals/1.4/3.5.2_configuration_options.md" , "position" : 220 , "original_position" : 220 , "commit_id" : "42a68f6cef220f4994f39e56460d760abc394ee1" , "original_commit_id" : "42a68f6cef220f4994f39e56460d760abc394ee1" , "user" : { "login" : "domcleal" , "id" : 482089 , "avatar_url" : "https://gravatar.com/avatar/b610ed8556fcee2b7ab876c642a4ce42?d=https%3A%2F%2Fidenticons.github.com%2Fa3815ce6fe14ce9594a64da81bbd7d15.png&r=x" , "gravatar_id" : "b610ed8556fcee2b7ab876c642a4ce42" , "url" : "https://api.github.com/users/domcleal" , "html_url" : "https://github.com/domcleal" , "followers_url" : "https://api.github.com/users/domcleal/followers" , "following_url" : "https://api.github.com/users/domcleal/following{/other_user}" , "gists_url" : "https://api.github.com/users/domcleal/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/domcleal/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/domcleal/subscriptions" , "organizations_url" : "https://api.github.com/users/domcleal/orgs" , "repos_url" : "https://api.github.com/users/domcleal/repos" , "events_url" : "https://api.github.com/users/domcleal/events{/privacy}" , "received_events_url" : "https://api.github.com/users/domcleal/received_events" , "type" : "User" , "site_admin" : false} , "body" : "I'd elaborate on \"build\" request - i.e. the request made at the end of a provisioning cycle to indicate it's completed the build." , "created_at" : "2014-01-29T20:19:20Z" , "updated_at" : "2014-01-29T20:19:20Z" , "html_url" : "https://github.com/theforeman/theforeman.org/pull/157#discussion_r9282606" , "pull_request_url" : "https://api.github.com/repos/theforeman/theforeman.org/pulls/157" , "_links" : { "self" : { "href" : "https://api.github.com/repos/theforeman/theforeman.org/pulls/comments/9282606"} , "html" : { "href" : "https://github.com/theforeman/theforeman.org/pull/157#discussion_r9282606"} , "pull_request" : { "href" : "https://api.github.com/repos/theforeman/theforeman.org/pulls/157"}} , "repo" : "theforeman.org" , "owner" : "theforeman" , "pullreq_id" : 157}
{ "_id" : { "$oid" : "52e96251bd3543febe003d88"} , "url" : "https://api.github.com/repos/adobe/brackets-registry/pulls/comments/9282612" , "id" : 9282612 , "diff_hunk" : "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.\n+ *  \n+ * Permission is hereby granted, free of charge, to any person obtaining a\n+ * copy of this software and associated documentation files (the \"Software\"), \n+ * to deal in the Software without restriction, including without limitation \n+ * the rights to use, copy, modify, merge, publish, distribute, sublicense, \n+ * and/or sell copies of the Software, and to permit persons to whom the \n+ * Software is furnished to do so, subject to the following conditions:\n+ *  \n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *  \n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \n+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER \n+ * DEALINGS IN THE SOFTWARE.\n+ * \n+ */\n+\n+/*jslint vars: true, plusplus: true, devel: true, node: true, nomen: true,\n+indent: 4, maxerr: 50 */\n+\n+\"use strict\";\n+\n+var AWS        = require(\"aws-sdk\"),\n+    fs         = require(\"fs\"),\n+    path       = require(\"path\"),\n+    readline   = require(\"readline\"),\n+    FileQueue  = require(\"filequeue\"),\n+    eachline   = require(\"eachline\"),\n+    Promise    = require(\"bluebird\"),\n+    _          = require(\"lodash\");\n+\n+// this regex is used to parse AWS access logfiles. A usual line in the logfile looks like the one below.\n+// 04db613bd000d07badc32d16138efc3efa3e96c6c3ca18365997ba468a6ac850 repository.brackets.io [19/Jul/2013:16:26:40 +0000] 192.150.22.5 - 5444C2FE39980E28 REST.GET.OBJECT select-parent/select-parent-1.0.0.zip \"GET /repository.brackets.io/select-parent/select-parent-1.0.0.zip HTTP/1.1\" 200 - 56846 56846 566 268 \"-\" \"-\" -\n+var regex = /(\\S+) (\\S+) (\\S+ \\+\\S+\\]) (\\S+) (\\S+) (\\S+) (\\S+) (\\S+) \"(\\S+) (\\S+) (\\S+)\" (\\S+) (\\S+) (\\S+) (\\S+) (\\S+) (\\S+) (\\S+) \"(.*)\" (\\S+)/;\n+\n+function LogfileProcessor(config) {\n+    var accessKeyId = config[\"aws.accesskey\"]," , "path" : "downloadStats/logfileProcessor.js" , "position" : 43 , "original_position" : 43 , "commit_id" : "5c08cad4084d305531ab9227b8c2d5c9dc8b81ff" , "original_commit_id" : "5c08cad4084d305531ab9227b8c2d5c9dc8b81ff" , "user" : { "login" : "ingorichter" , "id" : 86214 , "avatar_url" : "https://gravatar.com/avatar/99581c289400be0f89188abe3c65c373?d=https%3A%2F%2Fidenticons.github.com%2Ff0e7b4062c91e5873a9ce50a4424d2d6.png&r=x" , "gravatar_id" : "99581c289400be0f89188abe3c65c373" , "url" : "https://api.github.com/users/ingorichter" , "html_url" : "https://github.com/ingorichter" , "followers_url" : "https://api.github.com/users/ingorichter/followers" , "following_url" : "https://api.github.com/users/ingorichter/following{/other_user}" , "gists_url" : "https://api.github.com/users/ingorichter/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/ingorichter/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/ingorichter/subscriptions" , "organizations_url" : "https://api.github.com/users/ingorichter/orgs" , "repos_url" : "https://api.github.com/users/ingorichter/repos" , "events_url" : "https://api.github.com/users/ingorichter/events{/privacy}" , "received_events_url" : "https://api.github.com/users/ingorichter/received_events" , "type" : "User" , "site_admin" : false} , "body" : "Done." , "created_at" : "2014-01-29T20:19:27Z" , "updated_at" : "2014-01-29T20:19:27Z" , "html_url" : "https://github.com/adobe/brackets-registry/pull/49#discussion_r9282612" , "pull_request_url" : "https://api.github.com/repos/adobe/brackets-registry/pulls/49" , "_links" : { "self" : { "href" : "https://api.github.com/repos/adobe/brackets-registry/pulls/comments/9282612"} , "html" : { "href" : "https://github.com/adobe/brackets-registry/pull/49#discussion_r9282612"} , "pull_request" : { "href" : "https://api.github.com/repos/adobe/brackets-registry/pulls/49"}} , "repo" : "brackets-registry" , "owner" : "adobe" , "pullreq_id" : 49}
{ "_id" : { "$oid" : "52e9625abd354301f0004ca5"} , "url" : "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/9282619" , "id" : 9282619 , "diff_hunk" : "@@ -95,7 +95,7 @@ module Puppet\n         begin\n           provider.update\n         rescue => detail\n-          self.fail \"Could not update: #{detail}\"\n+          self.fail Puppet::Error, \"Could not update: #{detail}\", detail.backtrace" , "path" : "lib/puppet/type/package.rb" , "position" : 5 , "original_position" : 5 , "commit_id" : "9fa4a39a684cba8ccb0902060a2557357c05f39e" , "original_commit_id" : "9fa4a39a684cba8ccb0902060a2557357c05f39e" , "user" : { "login" : "peterhuene" , "id" : 509666 , "avatar_url" : "https://gravatar.com/avatar/31a910d347dac0a0b6a433e192cf3aab?d=https%3A%2F%2Fidenticons.github.com%2F3a98cc2a9ab230d09033ef5d7302029d.png&r=x" , "gravatar_id" : "31a910d347dac0a0b6a433e192cf3aab" , "url" : "https://api.github.com/users/peterhuene" , "html_url" : "https://github.com/peterhuene" , "followers_url" : "https://api.github.com/users/peterhuene/followers" , "following_url" : "https://api.github.com/users/peterhuene/following{/other_user}" , "gists_url" : "https://api.github.com/users/peterhuene/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/peterhuene/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/peterhuene/subscriptions" , "organizations_url" : "https://api.github.com/users/peterhuene/orgs" , "repos_url" : "https://api.github.com/users/peterhuene/repos" , "events_url" : "https://api.github.com/users/peterhuene/events{/privacy}" , "received_events_url" : "https://api.github.com/users/peterhuene/received_events" , "type" : "User" , "site_admin" : false} , "body" : "Will fix this and the one below." , "created_at" : "2014-01-29T20:19:34Z" , "updated_at" : "2014-01-29T20:19:34Z" , "html_url" : "https://github.com/puppetlabs/puppet/pull/2293#discussion_r9282619" , "pull_request_url" : "https://api.github.com/repos/puppetlabs/puppet/pulls/2293" , "_links" : { "self" : { "href" : "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/9282619"} , "html" : { "href" : "https://github.com/puppetlabs/puppet/pull/2293#discussion_r9282619"} , "pull_request" : { "href" : "https://api.github.com/repos/puppetlabs/puppet/pulls/2293"}} , "repo" : "puppet" , "owner" : "puppetlabs" , "pullreq_id" : 2293}
{ "_id" : { "$oid" : "52e9625abd354302ad004cec"} , "url" : "https://api.github.com/repos/adobe/brackets-registry/pulls/comments/9282618" , "id" : 9282618 , "diff_hunk" : "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.\n+ *  \n+ * Permission is hereby granted, free of charge, to any person obtaining a\n+ * copy of this software and associated documentation files (the \"Software\"), \n+ * to deal in the Software without restriction, including without limitation \n+ * the rights to use, copy, modify, merge, publish, distribute, sublicense, \n+ * and/or sell copies of the Software, and to permit persons to whom the \n+ * Software is furnished to do so, subject to the following conditions:\n+ *  \n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *  \n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \n+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER \n+ * DEALINGS IN THE SOFTWARE.\n+ * \n+ */\n+\n+/*jslint vars: true, plusplus: true, devel: true, node: true, nomen: true,\n+indent: 4, maxerr: 50 */\n+\n+\"use strict\";\n+\n+var AWS        = require(\"aws-sdk\"),\n+    fs         = require(\"fs\"),\n+    path       = require(\"path\"),\n+    readline   = require(\"readline\"),\n+    FileQueue  = require(\"filequeue\"),\n+    eachline   = require(\"eachline\"),\n+    Promise    = require(\"bluebird\"),\n+    _          = require(\"lodash\");\n+\n+// this regex is used to parse AWS access logfiles. A usual line in the logfile looks like the one below.\n+// 04db613bd000d07badc32d16138efc3efa3e96c6c3ca18365997ba468a6ac850 repository.brackets.io [19/Jul/2013:16:26:40 +0000] 192.150.22.5 - 5444C2FE39980E28 REST.GET.OBJECT select-parent/select-parent-1.0.0.zip \"GET /repository.brackets.io/select-parent/select-parent-1.0.0.zip HTTP/1.1\" 200 - 56846 56846 566 268 \"-\" \"-\" -\n+var regex = /(\\S+) (\\S+) (\\S+ \\+\\S+\\]) (\\S+) (\\S+) (\\S+) (\\S+) (\\S+) \"(\\S+) (\\S+) (\\S+)\" (\\S+) (\\S+) (\\S+) (\\S+) (\\S+) (\\S+) (\\S+) \"(.*)\" (\\S+)/;\n+\n+function LogfileProcessor(config) {\n+    var accessKeyId = config[\"aws.accesskey\"],\n+        secretAccessKey = config[\"aws.secretkey\"];\n+\n+    this.bucketName = config[\"s3.bucket\"];" , "path" : "downloadStats/logfileProcessor.js" , "position" : 46 , "original_position" : 46 , "commit_id" : "5c08cad4084d305531ab9227b8c2d5c9dc8b81ff" , "original_commit_id" : "5c08cad4084d305531ab9227b8c2d5c9dc8b81ff" , "user" : { "login" : "ingorichter" , "id" : 86214 , "avatar_url" : "https://gravatar.com/avatar/99581c289400be0f89188abe3c65c373?d=https%3A%2F%2Fidenticons.github.com%2Ff0e7b4062c91e5873a9ce50a4424d2d6.png&r=x" , "gravatar_id" : "99581c289400be0f89188abe3c65c373" , "url" : "https://api.github.com/users/ingorichter" , "html_url" : "https://github.com/ingorichter" , "followers_url" : "https://api.github.com/users/ingorichter/followers" , "following_url" : "https://api.github.com/users/ingorichter/following{/other_user}" , "gists_url" : "https://api.github.com/users/ingorichter/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/ingorichter/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/ingorichter/subscriptions" , "organizations_url" : "https://api.github.com/users/ingorichter/orgs" , "repos_url" : "https://api.github.com/users/ingorichter/repos" , "events_url" : "https://api.github.com/users/ingorichter/events{/privacy}" , "received_events_url" : "https://api.github.com/users/ingorichter/received_events" , "type" : "User" , "site_admin" : false} , "body" : "Done." , "created_at" : "2014-01-29T20:19:33Z" , "updated_at" : "2014-01-29T20:19:33Z" , "html_url" : "https://github.com/adobe/brackets-registry/pull/49#discussion_r9282618" , "pull_request_url" : "https://api.github.com/repos/adobe/brackets-registry/pulls/49" , "_links" : { "self" : { "href" : "https://api.github.com/repos/adobe/brackets-registry/pulls/comments/9282618"} , "html" : { "href" : "https://github.com/adobe/brackets-registry/pull/49#discussion_r9282618"} , "pull_request" : { "href" : "https://api.github.com/repos/adobe/brackets-registry/pulls/49"}} , "repo" : "brackets-registry" , "owner" : "adobe" , "pullreq_id" : 49}
{ "_id" : { "$oid" : "52e96265bd3543fef5004c64"} , "url" : "https://api.github.com/repos/zf-fr/rbac/pulls/comments/9282628" , "id" : 9282628 , "diff_hunk" : "@@ -43,8 +43,6 @@ public function __construct(TraversalStrategyInterface $strategy)\n      */\n     public function isGranted($roles, $permission)\n     {\n-        $permission = (string) $permission;\n-" , "path" : "src/Rbac/Rbac.php" , "position" : 5 , "original_position" : 5 , "commit_id" : "836b53fa1b7a2dc75e0022ff2a1d30b60cde03d0" , "original_commit_id" : "836b53fa1b7a2dc75e0022ff2a1d30b60cde03d0" , "user" : { "login" : "arekkas" , "id" : 3372410 , "avatar_url" : "https://gravatar.com/avatar/2f7210eb32909557135ebdb9d275f4a2?d=https%3A%2F%2Fidenticons.github.com%2F8d83df8ec9332ccf6b899d6dd844fe4d.png&r=x" , "gravatar_id" : "2f7210eb32909557135ebdb9d275f4a2" , "url" : "https://api.github.com/users/arekkas" , "html_url" : "https://github.com/arekkas" , "followers_url" : "https://api.github.com/users/arekkas/followers" , "following_url" : "https://api.github.com/users/arekkas/following{/other_user}" , "gists_url" : "https://api.github.com/users/arekkas/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/arekkas/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/arekkas/subscriptions" , "organizations_url" : "https://api.github.com/users/arekkas/orgs" , "repos_url" : "https://api.github.com/users/arekkas/repos" , "events_url" : "https://api.github.com/users/arekkas/events{/privacy}" , "received_events_url" : "https://api.github.com/users/arekkas/received_events" , "type" : "User" , "site_admin" : false} , "body" : "That could be done - then we would at least be sure that `hasPermission` would properly be called but we could also use `mixed $permission` on both `RoleInterface` and `Rbac` so it would be up to the developer to decide what he want's to check exactly. That way, even Criteria (doctrines criteria api) could be passed!" , "created_at" : "2014-01-29T20:19:47Z" , "updated_at" : "2014-01-29T20:19:47Z" , "html_url" : "https://github.com/zf-fr/rbac/pull/9#discussion_r9282628" , "pull_request_url" : "https://api.github.com/repos/zf-fr/rbac/pulls/9" , "_links" : { "self" : { "href" : "https://api.github.com/repos/zf-fr/rbac/pulls/comments/9282628"} , "html" : { "href" : "https://github.com/zf-fr/rbac/pull/9#discussion_r9282628"} , "pull_request" : { "href" : "https://api.github.com/repos/zf-fr/rbac/pulls/9"}} , "repo" : "rbac" , "owner" : "zf-fr" , "pullreq_id" : 9}
{ "_id" : { "$oid" : "52e96267bd3543fed6004ca1"} , "url" : "https://api.github.com/repos/RedHatQE/cfme_tests/pulls/comments/9282631" , "id" : 9282631 , "diff_hunk" : "@@ -25,21 +24,19 @@\n     },\n     title='CloudForms Management Engine: Cloud Providers')\n \n-discover_page = Region(\n-    locators={\n-        'start_button': \"//input[@name='start']\",\n-        'cancel_button': \"//input[@name='cancel']\",\n-        'username': \"//*[@id='userid']\",\n-        'password': \"//*[@id='password']\",\n-        'password_verify': \"//*[@id='verify']\",\n-        'form_title': (By.CSS_SELECTOR, \"div.dhtmlxInfoBarLabel-2\"),\n-    },\n-    title='CloudForms Management Engine: Cloud Providers')\n+discover_form = Form(\n+    fields=[\n+        ('username', \"//*[@id='userid']\"),\n+        ('password', \"//*[@id='password']\"),\n+        ('password_verify', \"//*[@id='verify']\"),\n+        ('start_button', \"//input[@name='start']\"),\n+        ('cancel_button', \"//input[@name='cancel']\"),\n+    ])" , "path" : "cfme/cloud/provider.py" , "position" : 32 , "original_position" : 32 , "commit_id" : "d10370cc030e1a56fbd7d685fd51fe7ff64d3c39" , "original_commit_id" : "d10370cc030e1a56fbd7d685fd51fe7ff64d3c39" , "user" : { "login" : "weissjeffm" , "id" : 107329 , "avatar_url" : "https://gravatar.com/avatar/74bcc6b0207539f3b6988bca1d81db82?d=https%3A%2F%2Fidenticons.github.com%2Ff25453cac3a6ce0bea1d76223c7ba8e8.png&r=x" , "gravatar_id" : "74bcc6b0207539f3b6988bca1d81db82" , "url" : "https://api.github.com/users/weissjeffm" , "html_url" : "https://github.com/weissjeffm" , "followers_url" : "https://api.github.com/users/weissjeffm/followers" , "following_url" : "https://api.github.com/users/weissjeffm/following{/other_user}" , "gists_url" : "https://api.github.com/users/weissjeffm/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/weissjeffm/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/weissjeffm/subscriptions" , "organizations_url" : "https://api.github.com/users/weissjeffm/orgs" , "repos_url" : "https://api.github.com/users/weissjeffm/repos" , "events_url" : "https://api.github.com/users/weissjeffm/events{/privacy}" , "received_events_url" : "https://api.github.com/users/weissjeffm/received_events" , "type" : "User" , "site_admin" : false} , "body" : "Discover form is now a ... form" , "created_at" : "2014-01-29T20:19:50Z" , "updated_at" : "2014-01-29T20:19:50Z" , "html_url" : "https://github.com/RedHatQE/cfme_tests/pull/365#discussion_r9282631" , "pull_request_url" : "https://api.github.com/repos/RedHatQE/cfme_tests/pulls/365" , "_links" : { "self" : { "href" : "https://api.github.com/repos/RedHatQE/cfme_tests/pulls/comments/9282631"} , "html" : { "href" : "https://github.com/RedHatQE/cfme_tests/pull/365#discussion_r9282631"} , "pull_request" : { "href" : "https://api.github.com/repos/RedHatQE/cfme_tests/pulls/365"}} , "repo" : "cfme_tests" , "owner" : "RedHatQE" , "pullreq_id" : 365}
{ "_id" : { "$oid" : "52e96281bd35430297004d9f"} , "url" : "https://api.github.com/repos/mozilla/addon-sdk/pulls/comments/9282639" , "id" : 9282639 , "diff_hunk" : "@@ -62,3 +62,33 @@ exports.testPageMod = function testPageMod(assert, done, testURL, pageModOptions\n \n   return pageMods;\n }\n+\n+/**\n+ * helper function that creates a PageMod and calls back the appropriate handler\n+ * based on the value of document.readyState at the time contentScript is attached\n+ */\n+exports.handleReadyState = function(url, contentScriptWhen, callbacks) {\n+  const { PageMod } = Loader(module).require('sdk/page-mod');\n+  const STATES = ['loading', 'interactive', 'complete'];\n+\n+  let pagemod = PageMod({\n+    include: url,\n+    attachTo: ['existing', 'top'],\n+    contentScriptWhen: contentScriptWhen,\n+    contentScript: \"self.postMessage(document.readyState)\",\n+    onAttach: function({on, tab}) {" , "path" : "test/pagemod-test-helpers.js" , "position" : 18 , "original_position" : 18 , "commit_id" : "43e8f3ed1331bdcdff924a00a402af8d7970d90f" , "original_commit_id" : "43e8f3ed1331bdcdff924a00a402af8d7970d90f" , "user" : { "login" : "zombie" , "id" : 207002 , "avatar_url" : "https://gravatar.com/avatar/2132cf6e7db0fa0e604b86d120c813ee?d=https%3A%2F%2Fidenticons.github.com%2Fe7c9dbb81b75cdf2ea6cfd4cc5bd6bdb.png&r=x" , "gravatar_id" : "2132cf6e7db0fa0e604b86d120c813ee" , "url" : "https://api.github.com/users/zombie" , "html_url" : "https://github.com/zombie" , "followers_url" : "https://api.github.com/users/zombie/followers" , "following_url" : "https://api.github.com/users/zombie/following{/other_user}" , "gists_url" : "https://api.github.com/users/zombie/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/zombie/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/zombie/subscriptions" , "organizations_url" : "https://api.github.com/users/zombie/orgs" , "repos_url" : "https://api.github.com/users/zombie/repos" , "events_url" : "https://api.github.com/users/zombie/events{/privacy}" , "received_events_url" : "https://api.github.com/users/zombie/received_events" , "type" : "User" , "site_admin" : false} , "body" : "yes i did run the tests. you are right now, but this *did* work, probably up until (a couple of weeks ago)[https://github.com/mozilla/addon-sdk/commits/master/lib/sdk/content/worker.js], before workers detraitification (or the removal of `deprecated/observer-service`).\r\n\r\nyou can still check this was true by forcing the modules from this branch to be included while running tests with `cfx -o testpkgs -f page-mod`." , "created_at" : "2014-01-29T20:20:08Z" , "updated_at" : "2014-01-29T20:20:08Z" , "html_url" : "https://github.com/mozilla/addon-sdk/pull/1334#discussion_r9282639" , "pull_request_url" : "https://api.github.com/repos/mozilla/addon-sdk/pulls/1334" , "_links" : { "self" : { "href" : "https://api.github.com/repos/mozilla/addon-sdk/pulls/comments/9282639"} , "html" : { "href" : "https://github.com/mozilla/addon-sdk/pull/1334#discussion_r9282639"} , "pull_request" : { "href" : "https://api.github.com/repos/mozilla/addon-sdk/pulls/1334"}} , "repo" : "addon-sdk" , "owner" : "mozilla" , "pullreq_id" : 1334}
{ "_id" : { "$oid" : "52e96282bd35430297004da0"} , "url" : "https://api.github.com/repos/statsmodels/statsmodels/pulls/comments/9282642" , "id" : 9282642 , "diff_hunk" : "@@ -186,24 +191,24 @@ def adfuller(x, maxlag=None, regression=\"c\", autolag='AIC',\n     if regresults:\n         store = True\n \n-    trenddict = {None:'nc', 0:'c', 1:'ct', 2:'ctt'}\n+    trenddict = {None: 'nc', 0: 'c', 1: 'ct', 2: 'ctt'}" , "path" : "statsmodels/tsa/stattools.py" , "position" : 76 , "original_position" : 76 , "commit_id" : "495d546f69df7e5dec47599d01e079fdac2e855b" , "original_commit_id" : "495d546f69df7e5dec47599d01e079fdac2e855b" , "user" : { "login" : "josef-pkt" , "id" : 440735 , "avatar_url" : "https://gravatar.com/avatar/ad13088a623822caf74e635a68a55eae?d=https%3A%2F%2Fidenticons.github.com%2F05b33ac9d1adf49cf37e260b65d722e0.png&r=x" , "gravatar_id" : "ad13088a623822caf74e635a68a55eae" , "url" : "https://api.github.com/users/josef-pkt" , "html_url" : "https://github.com/josef-pkt" , "followers_url" : "https://api.github.com/users/josef-pkt/followers" , "following_url" : "https://api.github.com/users/josef-pkt/following{/other_user}" , "gists_url" : "https://api.github.com/users/josef-pkt/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/josef-pkt/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/josef-pkt/subscriptions" , "organizations_url" : "https://api.github.com/users/josef-pkt/orgs" , "repos_url" : "https://api.github.com/users/josef-pkt/repos" , "events_url" : "https://api.github.com/users/josef-pkt/events{/privacy}" , "received_events_url" : "https://api.github.com/users/josef-pkt/received_events" , "type" : "User" , "site_admin" : false} , "body" : "I think that looks good,\r\nthe \"stranger\" thing was the space before the `:`" , "created_at" : "2014-01-29T20:20:12Z" , "updated_at" : "2014-01-29T20:20:12Z" , "html_url" : "https://github.com/statsmodels/statsmodels/pull/1346#discussion_r9282642" , "pull_request_url" : "https://api.github.com/repos/statsmodels/statsmodels/pulls/1346" , "_links" : { "self" : { "href" : "https://api.github.com/repos/statsmodels/statsmodels/pulls/comments/9282642"} , "html" : { "href" : "https://github.com/statsmodels/statsmodels/pull/1346#discussion_r9282642"} , "pull_request" : { "href" : "https://api.github.com/repos/statsmodels/statsmodels/pulls/1346"}} , "repo" : "statsmodels" , "owner" : "statsmodels" , "pullreq_id" : 1346}
{ "_id" : { "$oid" : "52e962a5bd354302ad004d10"} , "url" : "https://api.github.com/repos/RedHatQE/cfme_tests/pulls/comments/9282660" , "id" : 9282660 , "diff_hunk" : "@@ -86,36 +83,19 @@ class Provider(Updateable):\n \n     Usage:\n \n-        myprov = Provider(name='foo',\n-                          details=Provider.EC2Details(region='US West (Oregon)'),\n-                          credentials=Provider.Credential(principal='admin', secret='foobar'))\n+        myprov = EC2Provider(name='foo',\n+                             region='US West (Oregon)',\n+                             credentials=Provider.Credential(principal='admin', secret='foobar'))\n         myprov.create()\n \n     '''\n \n-    def __init__(self, name=None, details=None, credentials=None, zone=None, key=None):\n+    def __init__(self, name=None, credentials=None, zone=None, key=None):\n         self.name = name\n-        self.details = details\n         self.credentials = credentials\n         self.zone = zone\n         self.key = key\n \n-    class EC2Details(Updateable):\n-        '''Models EC2 provider details '''\n-\n-        def __init__(self, region=None):\n-            self.details = {'amazon_region_select': region,\n-                            'type_select': 'Amazon EC2'}\n-\n-    class OpenStackDetails(Updateable):\n-        '''Models Openstack provider details '''\n-\n-        def __init__(self, hostname=None, ip_address=None, api_port=None):\n-            self.details = {'hostname_text': hostname,\n-                            'ipaddress_text': ip_address,\n-                            'api_port': api_port,\n-                            'type_select': 'OpenStack'}" , "path" : "cfme/cloud/provider.py" , "position" : 132 , "original_position" : 132 , "commit_id" : "d10370cc030e1a56fbd7d685fd51fe7ff64d3c39" , "original_commit_id" : "d10370cc030e1a56fbd7d685fd51fe7ff64d3c39" , "user" : { "login" : "weissjeffm" , "id" : 107329 , "avatar_url" : "https://gravatar.com/avatar/74bcc6b0207539f3b6988bca1d81db82?d=https%3A%2F%2Fidenticons.github.com%2Ff25453cac3a6ce0bea1d76223c7ba8e8.png&r=x" , "gravatar_id" : "74bcc6b0207539f3b6988bca1d81db82" , "url" : "https://api.github.com/users/weissjeffm" , "html_url" : "https://github.com/weissjeffm" , "followers_url" : "https://api.github.com/users/weissjeffm/followers" , "following_url" : "https://api.github.com/users/weissjeffm/following{/other_user}" , "gists_url" : "https://api.github.com/users/weissjeffm/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/weissjeffm/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/weissjeffm/subscriptions" , "organizations_url" : "https://api.github.com/users/weissjeffm/orgs" , "repos_url" : "https://api.github.com/users/weissjeffm/repos" , "events_url" : "https://api.github.com/users/weissjeffm/events{/privacy}" , "received_events_url" : "https://api.github.com/users/weissjeffm/received_events" , "type" : "User" , "site_admin" : false} , "body" : "Removed the inner classes and made them subclasses, at @psav 's suggestion (good one)" , "created_at" : "2014-01-29T20:20:47Z" , "updated_at" : "2014-01-29T20:20:47Z" , "html_url" : "https://github.com/RedHatQE/cfme_tests/pull/365#discussion_r9282660" , "pull_request_url" : "https://api.github.com/repos/RedHatQE/cfme_tests/pulls/365" , "_links" : { "self" : { "href" : "https://api.github.com/repos/RedHatQE/cfme_tests/pulls/comments/9282660"} , "html" : { "href" : "https://github.com/RedHatQE/cfme_tests/pull/365#discussion_r9282660"} , "pull_request" : { "href" : "https://api.github.com/repos/RedHatQE/cfme_tests/pulls/365"}} , "repo" : "cfme_tests" , "owner" : "RedHatQE" , "pullreq_id" : 365}
{ "_id" : { "$oid" : "52e962a9bd3543020f003d04"} , "url" : "https://api.github.com/repos/zf-fr/rbac/pulls/comments/9282665" , "id" : 9282665 , "diff_hunk" : "@@ -43,8 +43,6 @@ public function __construct(TraversalStrategyInterface $strategy)\n      */\n     public function isGranted($roles, $permission)\n     {\n-        $permission = (string) $permission;\n-" , "path" : "src/Rbac/Rbac.php" , "position" : 5 , "original_position" : 5 , "commit_id" : "836b53fa1b7a2dc75e0022ff2a1d30b60cde03d0" , "original_commit_id" : "836b53fa1b7a2dc75e0022ff2a1d30b60cde03d0" , "user" : { "login" : "arekkas" , "id" : 3372410 , "avatar_url" : "https://gravatar.com/avatar/2f7210eb32909557135ebdb9d275f4a2?d=https%3A%2F%2Fidenticons.github.com%2F8d83df8ec9332ccf6b899d6dd844fe4d.png&r=x" , "gravatar_id" : "2f7210eb32909557135ebdb9d275f4a2" , "url" : "https://api.github.com/users/arekkas" , "html_url" : "https://github.com/arekkas" , "followers_url" : "https://api.github.com/users/arekkas/followers" , "following_url" : "https://api.github.com/users/arekkas/following{/other_user}" , "gists_url" : "https://api.github.com/users/arekkas/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/arekkas/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/arekkas/subscriptions" , "organizations_url" : "https://api.github.com/users/arekkas/orgs" , "repos_url" : "https://api.github.com/users/arekkas/repos" , "events_url" : "https://api.github.com/users/arekkas/events{/privacy}" , "received_events_url" : "https://api.github.com/users/arekkas/received_events" , "type" : "User" , "site_admin" : false} , "body" : "Because we don't actually care what type `$permission` is - the role cares - yes - but we do not implement the role so there fore it is not in our responsibility to check the correctness of the argument passed." , "created_at" : "2014-01-29T20:20:53Z" , "updated_at" : "2014-01-29T20:20:53Z" , "html_url" : "https://github.com/zf-fr/rbac/pull/9#discussion_r9282665" , "pull_request_url" : "https://api.github.com/repos/zf-fr/rbac/pulls/9" , "_links" : { "self" : { "href" : "https://api.github.com/repos/zf-fr/rbac/pulls/comments/9282665"} , "html" : { "href" : "https://github.com/zf-fr/rbac/pull/9#discussion_r9282665"} , "pull_request" : { "href" : "https://api.github.com/repos/zf-fr/rbac/pulls/9"}} , "repo" : "rbac" , "owner" : "zf-fr" , "pullreq_id" : 9}
{ "_id" : { "$oid" : "52e962a9bd3543fe66004bea"} , "url" : "https://api.github.com/repos/basho/basho_docs/pulls/comments/9282664" , "id" : 9282664 , "diff_hunk" : "@@ -14,15 +14,19 @@ moved: {\n \n Set the properties for a bucket\n \n-<div class=\"note\"><p>The PBC interface does not currently support all bucket\n-properties. It is currently limited to <code>allow_mult</code> and\n-<code>n_val</code>; other bucket properties would need to be set with the [[HTTP\n-API|HTTP Set Bucket Properties]].</p>\n+<div class=\"note\">\n+<div class=\"title\">Note</div>\n+{{#1.4.0-}}\n+The PBC interface does not currently support all bucket properties. It is currently limited to <tt>allow_mult</tt> and <tt>n_val</tt>. Other bucket properties would need to be set using the [[HTTP API|HTTP Set Bucket Properties]].\n+{{/1.4.0-}}\n+{{#1.4.0+}}\n+Currently, all bucket properties can be modified through the PBC interface with two exceptions: <tt>datatype</tt> and <tt>consistent</tt>." , "path" : "source/languages/en/riak/dev/references/protocol-buffers/set-bucket-props.md" , "position" : 14 , "original_position" : 14 , "commit_id" : "07447dc9c16b1a82b1a3f5f69ad8f48ea5d81d14" , "original_commit_id" : "07447dc9c16b1a82b1a3f5f69ad8f48ea5d81d14" , "user" : { "login" : "lucperkins" , "id" : 1523104 , "avatar_url" : "https://gravatar.com/avatar/af481d7274821037b1a807995b4a6598?d=https%3A%2F%2Fidenticons.github.com%2F50d704232d88c2d383188790adf3a0f4.png&r=x" , "gravatar_id" : "af481d7274821037b1a807995b4a6598" , "url" : "https://api.github.com/users/lucperkins" , "html_url" : "https://github.com/lucperkins" , "followers_url" : "https://api.github.com/users/lucperkins/followers" , "following_url" : "https://api.github.com/users/lucperkins/following{/other_user}" , "gists_url" : "https://api.github.com/users/lucperkins/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/lucperkins/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/lucperkins/subscriptions" , "organizations_url" : "https://api.github.com/users/lucperkins/orgs" , "repos_url" : "https://api.github.com/users/lucperkins/repos" , "events_url" : "https://api.github.com/users/lucperkins/events{/privacy}" , "received_events_url" : "https://api.github.com/users/lucperkins/received_events" , "type" : "User" , "site_admin" : false} , "body" : "I think that's true, yes. Part of me feels the need to mention that `datatype` and `consistent` are different from other bucket properties (or rather, not strictly bucket properties _per se_), but I also think that this is probably not the best venue to bring that up. So I'll remove this section. Good call." , "created_at" : "2014-01-29T20:20:51Z" , "updated_at" : "2014-01-29T20:20:51Z" , "html_url" : "https://github.com/basho/basho_docs/pull/780#discussion_r9282664" , "pull_request_url" : "https://api.github.com/repos/basho/basho_docs/pulls/780" , "_links" : { "self" : { "href" : "https://api.github.com/repos/basho/basho_docs/pulls/comments/9282664"} , "html" : { "href" : "https://github.com/basho/basho_docs/pull/780#discussion_r9282664"} , "pull_request" : { "href" : "https://api.github.com/repos/basho/basho_docs/pulls/780"}} , "repo" : "basho_docs" , "owner" : "basho" , "pullreq_id" : 780}
{ "_id" : { "$oid" : "52e962b0bd354301f0004cd5"} , "url" : "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/9282670" , "id" : 9282670 , "diff_hunk" : "@@ -330,7 +330,7 @@ def insync?(is)\n   def validate_ip(ip, name)\n     IPAddr.new(ip) if ip\n   rescue ArgumentError\n-    self.fail \"'#{ip}' is an invalid #{name}\"\n+    self.fail Puppet::Error, \"'#{ip}' is an invalid #{name}\", $!.backtrace" , "path" : "lib/puppet/type/zone.rb" , "position" : 5 , "original_position" : 5 , "commit_id" : "9fa4a39a684cba8ccb0902060a2557357c05f39e" , "original_commit_id" : "9fa4a39a684cba8ccb0902060a2557357c05f39e" , "user" : { "login" : "peterhuene" , "id" : 509666 , "avatar_url" : "https://gravatar.com/avatar/31a910d347dac0a0b6a433e192cf3aab?d=https%3A%2F%2Fidenticons.github.com%2F3a98cc2a9ab230d09033ef5d7302029d.png&r=x" , "gravatar_id" : "31a910d347dac0a0b6a433e192cf3aab" , "url" : "https://api.github.com/users/peterhuene" , "html_url" : "https://github.com/peterhuene" , "followers_url" : "https://api.github.com/users/peterhuene/followers" , "following_url" : "https://api.github.com/users/peterhuene/following{/other_user}" , "gists_url" : "https://api.github.com/users/peterhuene/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/peterhuene/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/peterhuene/subscriptions" , "organizations_url" : "https://api.github.com/users/peterhuene/orgs" , "repos_url" : "https://api.github.com/users/peterhuene/repos" , "events_url" : "https://api.github.com/users/peterhuene/events{/privacy}" , "received_events_url" : "https://api.github.com/users/peterhuene/received_events" , "type" : "User" , "site_admin" : false} , "body" : "Passing backtrace.  Will fix." , "created_at" : "2014-01-29T20:21:03Z" , "updated_at" : "2014-01-29T20:21:03Z" , "html_url" : "https://github.com/puppetlabs/puppet/pull/2293#discussion_r9282670" , "pull_request_url" : "https://api.github.com/repos/puppetlabs/puppet/pulls/2293" , "_links" : { "self" : { "href" : "https://api.github.com/repos/puppetlabs/puppet/pulls/comments/9282670"} , "html" : { "href" : "https://github.com/puppetlabs/puppet/pull/2293#discussion_r9282670"} , "pull_request" : { "href" : "https://api.github.com/repos/puppetlabs/puppet/pulls/2293"}} , "repo" : "puppet" , "owner" : "puppetlabs" , "pullreq_id" : 2293}
{ "_id" : { "$oid" : "52e962e6bd3543fe72003af4"} , "url" : "https://api.github.com/repos/RedHatQE/cfme_tests/pulls/comments/9282707" , "id" : 9282707 , "diff_hunk" : "@@ -265,13 +280,14 @@ def discover(credential, cancel=False):\n       credential (cfme.Credential):  Amazon discovery credentials.\n       cancel (boolean):  Whether to cancel out of the discover UI.\n     '''\n-\n     nav.go_to('cloud_provider_discover')\n-    if credential:\n-        credential.fill(setter(discover_page.username),\n-                        setter(discover_page.password),\n-                        setter(discover_page.password_verify))\n-    if cancel:\n-        browser.click(discover_page.cancel_button)\n+    if cancel:  # normalize so that the form filler only clicks either start or cancel\n+        cancel = True\n     else:\n-        browser.click(discover_page.start_button)\n+        cancel = None\n+\n+    fill(discover_form, {'username': credential.principal,\n+                         'password': credential.secret,\n+                         'password_verify': credential.verify_secret,\n+                         'start_button': not cancel,\n+                         'cancel_button': cancel})" , "path" : "cfme/cloud/provider.py" , "position" : 282 , "original_position" : 282 , "commit_id" : "d10370cc030e1a56fbd7d685fd51fe7ff64d3c39" , "original_commit_id" : "d10370cc030e1a56fbd7d685fd51fe7ff64d3c39" , "user" : { "login" : "weissjeffm" , "id" : 107329 , "avatar_url" : "https://gravatar.com/avatar/74bcc6b0207539f3b6988bca1d81db82?d=https%3A%2F%2Fidenticons.github.com%2Ff25453cac3a6ce0bea1d76223c7ba8e8.png&r=x" , "gravatar_id" : "74bcc6b0207539f3b6988bca1d81db82" , "url" : "https://api.github.com/users/weissjeffm" , "html_url" : "https://github.com/weissjeffm" , "followers_url" : "https://api.github.com/users/weissjeffm/followers" , "following_url" : "https://api.github.com/users/weissjeffm/following{/other_user}" , "gists_url" : "https://api.github.com/users/weissjeffm/gists{/gist_id}" , "starred_url" : "https://api.github.com/users/weissjeffm/starred{/owner}{/repo}" , "subscriptions_url" : "https://api.github.com/users/weissjeffm/subscriptions" , "organizations_url" : "https://api.github.com/users/weissjeffm/orgs" , "repos_url" : "https://api.github.com/users/weissjeffm/repos" , "events_url" : "https://api.github.com/users/weissjeffm/events{/privacy}" , "received_events_url" : "https://api.github.com/users/weissjeffm/received_events" , "type" : "User" , "site_admin" : false} , "body" : "Cred filling now uses `fill` instead of the weird list of functions i was passing in before." , "created_at" : "2014-01-29T20:21:57Z" , "updated_at" : "2014-01-29T20:21:57Z" , "html_url" : "https://github.com/RedHatQE/cfme_tests/pull/365#discussion_r9282707" , "pull_request_url" : "https://api.github.com/repos/RedHatQE/cfme_tests/pulls/365" , "_links" : { "self" : { "href" : "https://api.github.com/repos/RedHatQE/cfme_tests/pulls/comments/9282707"} , "html" : { "href" : "https://github.com/RedHatQE/cfme_tests/pull/365#discussion_r9282707"} , "pull_request" : { "href" : "https://api.github.com/repos/RedHatQE/cfme_tests/pulls/365"}} , "repo" : "cfme_tests" , "owner" : "RedHatQE" , "pullreq_id" : 365}
